!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACLOCAL	src/pam_ecryptfs/Makefile	/^ACLOCAL = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/missing --run aclocal-1.11$/;"	m
ACLOCAL	src/utils/Makefile	/^ACLOCAL = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/missing --run aclocal-1.11$/;"	m
ACLOCAL_M4	src/pam_ecryptfs/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	src/utils/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ALL_LINGUAS	src/pam_ecryptfs/Makefile	/^ALL_LINGUAS = $/;"	m
ALL_LINGUAS	src/utils/Makefile	/^ALL_LINGUAS = $/;"	m
AMTAR	src/pam_ecryptfs/Makefile	/^AMTAR = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/missing --run tar$/;"	m
AMTAR	src/utils/Makefile	/^AMTAR = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/missing --run tar$/;"	m
AR	src/pam_ecryptfs/Makefile	/^AR = ar$/;"	m
AR	src/utils/Makefile	/^AR = ar$/;"	m
ASSERT	src/utils/test.c	31;"	d	file:
AUTOCONF	src/pam_ecryptfs/Makefile	/^AUTOCONF = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/missing --run autoconf$/;"	m
AUTOCONF	src/utils/Makefile	/^AUTOCONF = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/missing --run autoconf$/;"	m
AUTOHEADER	src/pam_ecryptfs/Makefile	/^AUTOHEADER = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/missing --run autoheader$/;"	m
AUTOHEADER	src/utils/Makefile	/^AUTOHEADER = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/missing --run autoheader$/;"	m
AUTOMAKE	src/pam_ecryptfs/Makefile	/^AUTOMAKE = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/missing --run automake-1.11$/;"	m
AUTOMAKE	src/utils/Makefile	/^AUTOMAKE = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/missing --run automake-1.11$/;"	m
AWK	src/pam_ecryptfs/Makefile	/^AWK = gawk$/;"	m
AWK	src/utils/Makefile	/^AWK = gawk$/;"	m
CATALOGS	src/pam_ecryptfs/Makefile	/^CATALOGS = $/;"	m
CATALOGS	src/utils/Makefile	/^CATALOGS = $/;"	m
CATOBJEXT	src/pam_ecryptfs/Makefile	/^CATOBJEXT = .gmo$/;"	m
CATOBJEXT	src/utils/Makefile	/^CATOBJEXT = .gmo$/;"	m
CC	src/pam_ecryptfs/Makefile	/^CC = gcc$/;"	m
CC	src/utils/Makefile	/^CC = gcc$/;"	m
CCDEPMODE	src/pam_ecryptfs/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	src/utils/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	src/pam_ecryptfs/Makefile	/^CCLD = $(CC)$/;"	m
CCLD	src/utils/Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	src/pam_ecryptfs/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	src/utils/Makefile	/^CFLAGS = -g -O2$/;"	m
CIPHER_DESCRIPTOR_FLAG_LOADED	src/include/ecryptfs.h	435;"	d
COMPILE	src/pam_ecryptfs/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	src/utils/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	src/pam_ecryptfs/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	src/utils/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	src/pam_ecryptfs/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	src/utils/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	src/pam_ecryptfs/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	src/utils/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CPP	src/pam_ecryptfs/Makefile	/^CPP = gcc -E$/;"	m
CPP	src/utils/Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	src/pam_ecryptfs/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	src/utils/Makefile	/^CPPFLAGS = $/;"	m
CRYPTO_CFLAGS	src/pam_ecryptfs/Makefile	/^CRYPTO_CFLAGS = -I\/usr\/include\/nss -DENABLE_NSS -I\/usr\/include\/nspr$/;"	m
CRYPTO_CFLAGS	src/utils/Makefile	/^CRYPTO_CFLAGS = -I\/usr\/include\/nss -DENABLE_NSS -I\/usr\/include\/nspr$/;"	m
CRYPTO_LIBS	src/pam_ecryptfs/Makefile	/^CRYPTO_LIBS = -L\/usr\/lib -lssl3 -lsmime3 -lnss3 -lnssutil3$/;"	m
CRYPTO_LIBS	src/utils/Makefile	/^CRYPTO_LIBS = -L\/usr\/lib -lssl3 -lsmime3 -lnss3 -lnssutil3$/;"	m
CTAGS	src/pam_ecryptfs/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	src/utils/Makefile	/^CTAGS = ctags$/;"	m
CYGPATH_W	src/pam_ecryptfs/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	src/utils/Makefile	/^CYGPATH_W = echo$/;"	m
DATADIRNAME	src/pam_ecryptfs/Makefile	/^DATADIRNAME = share$/;"	m
DATADIRNAME	src/utils/Makefile	/^DATADIRNAME = share$/;"	m
DBGSYSLOG	src/key_mod/ecryptfs_key_mod_tspi.c	44;"	d	file:
DBGSYSLOG	src/key_mod/ecryptfs_key_mod_tspi.c	60;"	d	file:
DBG_print_hex	src/key_mod/ecryptfs_key_mod_tspi.c	45;"	d	file:
DBG_print_hex	src/key_mod/ecryptfs_key_mod_tspi.c	61;"	d	file:
DEBUG	src/key_mod/ecryptfs_key_mod_tspi.c	41;"	d	file:
DECISION_GRAPH_H	src/include/decision_graph.h	29;"	d
DEFAULT_INCLUDES	src/pam_ecryptfs/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	src/utils/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFAULT_STRING_LENGTH	src/utils/io.c	65;"	d	file:
DEFAULT_TOK	src/include/decision_graph.h	79;"	d
DEFS	src/pam_ecryptfs/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	src/utils/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	src/pam_ecryptfs/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	src/utils/Makefile	/^DEPDIR = .deps$/;"	m
DISPLAY_TRANSITION_NODE_VALS	src/include/decision_graph.h	97;"	d
DISTFILES	src/pam_ecryptfs/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	src/utils/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	src/pam_ecryptfs/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_COMMON	src/utils/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_SOURCES	src/pam_ecryptfs/Makefile	/^DIST_SOURCES = $(pam_ecryptfs_la_SOURCES)$/;"	m
DIST_SOURCES	src/utils/Makefile	/^DIST_SOURCES = $(ecryptfs_add_passphrase_SOURCES) \\$/;"	m
DSYMUTIL	src/pam_ecryptfs/Makefile	/^DSYMUTIL = $/;"	m
DSYMUTIL	src/utils/Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	src/pam_ecryptfs/Makefile	/^DUMPBIN = $/;"	m
DUMPBIN	src/utils/Makefile	/^DUMPBIN = $/;"	m
DVIPS	src/pam_ecryptfs/Makefile	/^DVIPS = $/;"	m
DVIPS	src/utils/Makefile	/^DVIPS = $/;"	m
ECHO_C	src/pam_ecryptfs/Makefile	/^ECHO_C = $/;"	m
ECHO_C	src/utils/Makefile	/^ECHO_C = $/;"	m
ECHO_N	src/pam_ecryptfs/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	src/utils/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	src/pam_ecryptfs/Makefile	/^ECHO_T = $/;"	m
ECHO_T	src/utils/Makefile	/^ECHO_T = $/;"	m
ECRPYTFS_STRING_LENGTH	src/include/ecryptfs.h	101;"	d
ECRYPTFS_AES_BLOCK_SIZE	src/include/ecryptfs.h	158;"	d
ECRYPTFS_AES_KEY_BYTES	src/include/ecryptfs.h	159;"	d
ECRYPTFS_ALLOW_IMPLICIT_TRANSITION	src/include/decision_graph.h	95;"	d
ECRYPTFS_ASK_FOR_ALL_MOUNT_OPTIONS	src/include/ecryptfs.h	512;"	d
ECRYPTFS_BLOB_TYPE_BLOB	src/include/ecryptfs.h	308;"	d
ECRYPTFS_BLOB_TYPE_HINT	src/include/ecryptfs.h	309;"	d
ECRYPTFS_CONTAINS_DECRYPTED_KEY	src/include/ecryptfs.h	183;"	d
ECRYPTFS_CONTAINS_ENCRYPTED_KEY	src/include/ecryptfs.h	184;"	d
ECRYPTFS_DEFAULT_EXTENT_SIZE	src/include/ecryptfs.h	100;"	d
ECRYPTFS_DEFAULT_IV_BYTES	src/include/ecryptfs.h	97;"	d
ECRYPTFS_DEFAULT_KEY_MOD_DIR	config.h	8;"	d
ECRYPTFS_DEFAULT_MESSAGING_TYPE	src/include/ecryptfs.h	499;"	d
ECRYPTFS_DEFAULT_MISCDEV_FULLPATH_0	src/include/ecryptfs.h	452;"	d
ECRYPTFS_DEFAULT_MISCDEV_FULLPATH_1	src/include/ecryptfs.h	453;"	d
ECRYPTFS_DEFAULT_NUM_HASH_ITERATIONS	src/include/ecryptfs.h	142;"	d
ECRYPTFS_DEFAULT_SALT_FNEK_HEX	src/include/ecryptfs.h	88;"	d
ECRYPTFS_DEFAULT_SALT_HEX	src/include/ecryptfs.h	87;"	d
ECRYPTFS_DEFAULT_VALUE_SET	src/include/ecryptfs.h	243;"	d
ECRYPTFS_DEFAULT_WRAPPED_PASSPHRASE_FILENAME	src/include/ecryptfs.h	161;"	d
ECRYPTFS_DISPLAY_PRETTY_VALS	src/include/decision_graph.h	103;"	d
ECRYPTFS_DONT_VALIDATE_HEADER_SIZE	src/libecryptfs/ecryptfs-stat.c	107;"	d	file:
ECRYPTFS_ECHO_OFF	src/include/ecryptfs.h	156;"	d
ECRYPTFS_ECHO_ON	src/include/ecryptfs.h	155;"	d
ECRYPTFS_ENABLE_HMAC	src/include/ecryptfs.h	478;"	d
ECRYPTFS_ENCRYPTED	src/include/ecryptfs.h	476;"	d
ECRYPTFS_ENCRYPT_IV_PAGES	src/include/ecryptfs.h	479;"	d
ECRYPTFS_ENCRYPT_ONLY	src/include/ecryptfs.h	227;"	d
ECRYPTFS_ERROR_FNEK_SUPPORT	src/include/ecryptfs.h	167;"	d
ECRYPTFS_ERROR_INSERT_KEY	src/include/ecryptfs.h	163;"	d
ECRYPTFS_ERROR_UNWRAP	src/include/ecryptfs.h	164;"	d
ECRYPTFS_ERROR_UNWRAP_AND_INSERT	src/include/ecryptfs.h	165;"	d
ECRYPTFS_ERROR_WRAP	src/include/ecryptfs.h	166;"	d
ECRYPTFS_EXTENT_SIZE	src/utils/test.c	80;"	d	file:
ECRYPTFS_FILE_SIZE_BYTES	src/include/ecryptfs.h	144;"	d
ECRYPTFS_FILE_VERSION	src/include/ecryptfs.h	98;"	d
ECRYPTFS_IMPLICIT_OVERRIDE_DEFAULT	src/include/decision_graph.h	105;"	d
ECRYPTFS_INFO_CHECK_LOG	src/include/ecryptfs.h	168;"	d
ECRYPTFS_KEY_MODULE_ONLY	src/include/ecryptfs.h	513;"	d
ECRYPTFS_KEY_MOD_BADPARAM	src/include/ecryptfs.h	312;"	d
ECRYPTFS_KEY_MOD_BUFTOOSMALL	src/include/ecryptfs.h	313;"	d
ECRYPTFS_KEY_MOD_DATA_TOO_LARGE	src/include/ecryptfs.h	315;"	d
ECRYPTFS_KEY_MOD_DECRYPT_FAILED	src/include/ecryptfs.h	317;"	d
ECRYPTFS_KEY_MOD_ENCRYPT_FAILED	src/include/ecryptfs.h	316;"	d
ECRYPTFS_KEY_MOD_HINT_INSUFFICIENT	src/include/ecryptfs.h	319;"	d
ECRYPTFS_KEY_MOD_INSUFFICIENT_PARAMS	src/include/ecryptfs.h	314;"	d
ECRYPTFS_KEY_MOD_NO_SUCH_KEY	src/include/ecryptfs.h	318;"	d
ECRYPTFS_KEY_MOD_OPENSSL	src/include/ecryptfs.h	137;"	d
ECRYPTFS_KEY_MOD_PARAM_TSPI_UUID	src/key_mod/ecryptfs_key_mod_tspi.c	520;"	d	file:
ECRYPTFS_KEY_MOD_SUCCESS	src/include/ecryptfs.h	311;"	d
ECRYPTFS_KEY_SET	src/include/ecryptfs.h	483;"	d
ECRYPTFS_KEY_VALID	src/include/ecryptfs.h	480;"	d
ECRYPTFS_MAX_ENCRYPTED_KEY_BYTES	src/include/ecryptfs.h	96;"	d
ECRYPTFS_MAX_IV_BYTES	src/utils/test.c	269;"	d	file:
ECRYPTFS_MAX_KEY_BYTES	src/include/ecryptfs.h	95;"	d
ECRYPTFS_MAX_KEY_MOD_NAME_BYTES	src/include/ecryptfs.h	124;"	d
ECRYPTFS_MAX_NUM_CIPHERS	src/include/ecryptfs.h	154;"	d
ECRYPTFS_MAX_PASSPHRASE_BYTES	src/include/ecryptfs.h	84;"	d
ECRYPTFS_MAX_PASSWORD_LENGTH	src/include/ecryptfs.h	83;"	d
ECRYPTFS_MESSAGING_STATE_LISTENING	src/include/ecryptfs.h	464;"	d
ECRYPTFS_MESSAGING_TYPE_MISCDEV	src/include/ecryptfs.h	462;"	d
ECRYPTFS_MESSAGING_TYPE_NETLINK	src/include/ecryptfs.h	461;"	d
ECRYPTFS_METADATA_IN_XATTR	src/include/ecryptfs.h	481;"	d
ECRYPTFS_MINIMUM_HEADER_EXTENT_SIZE	src/include/ecryptfs.h	99;"	d
ECRYPTFS_MSG_HELO	src/include/ecryptfs.h	118;"	d
ECRYPTFS_MSG_MAX_SIZE	src/include/ecryptfs.h	122;"	d
ECRYPTFS_MSG_QUIT	src/include/ecryptfs.h	119;"	d
ECRYPTFS_MSG_REQUEST	src/include/ecryptfs.h	120;"	d
ECRYPTFS_MSG_RESPONSE	src/include/ecryptfs.h	121;"	d
ECRYPTFS_NETLINK_ERROR_COUNT_THRESHOLD	src/include/ecryptfs.h	123;"	d
ECRYPTFS_NEW_FILE	src/include/ecryptfs.h	475;"	d
ECRYPTFS_NONEMPTY_VALUE_REQUIRED	src/include/decision_graph.h	106;"	d
ECRYPTFS_NOT_SALTLESS	src/include/ecryptfs.h	139;"	d
ECRYPTFS_NO_AUTO_TRANSITION	src/include/decision_graph.h	104;"	d
ECRYPTFS_NO_ECHO	src/include/ecryptfs.h	245;"	d
ECRYPTFS_NVP_FLAGS_TO_PARAM_FLAGS_MAP_SIZE	src/libecryptfs/decision_graph.c	928;"	d	file:
ECRYPTFS_OPENSSL_GEN_KEY_PARAM_NODE_KEYFILE	src/key_mod/ecryptfs_key_mod_openssl.c	730;"	d	file:
ECRYPTFS_OPENSSL_GEN_KEY_PARAM_NODE_PASSPHRASE	src/key_mod/ecryptfs_key_mod_openssl.c	731;"	d	file:
ECRYPTFS_PACKET_STATUS_BAD	src/libecryptfs/packets.c	43;"	d	file:
ECRYPTFS_PACKET_STATUS_GOOD	src/libecryptfs/packets.c	42;"	d	file:
ECRYPTFS_PAGE_STATE_MODIFIED	src/utils/test.c	289;"	d	file:
ECRYPTFS_PAGE_STATE_READ	src/utils/test.c	288;"	d	file:
ECRYPTFS_PAGE_STATE_UNREAD	src/utils/test.c	287;"	d	file:
ECRYPTFS_PAGE_STATE_WRITTEN	src/utils/test.c	290;"	d	file:
ECRYPTFS_PARAM_FLAG_ECHO_INPUT	src/include/decision_graph.h	93;"	d
ECRYPTFS_PARAM_FLAG_LOCK_MEM	src/include/decision_graph.h	101;"	d
ECRYPTFS_PARAM_FLAG_MASK_OUTPUT	src/include/decision_graph.h	94;"	d
ECRYPTFS_PARAM_FLAG_NO_VALUE	src/include/decision_graph.h	96;"	d
ECRYPTFS_PARAM_FORCE_DISPLAY_NODES	src/include/decision_graph.h	102;"	d
ECRYPTFS_PASSPHRASE_TOK	src/key_mod/ecryptfs_key_mod_passphrase.c	158;"	d	file:
ECRYPTFS_PASSWD_TOK	src/key_mod/ecryptfs_key_mod_passphrase.c	159;"	d	file:
ECRYPTFS_PASSWORD	src/include/ecryptfs.h	/^enum ecryptfs_token_types {ECRYPTFS_PASSWORD, ECRYPTFS_PRIVATE_KEY};$/;"	e	enum:ecryptfs_token_types
ECRYPTFS_PASSWORD_SIG_SIZE	src/include/ecryptfs.h	94;"	d
ECRYPTFS_PASS_FD_TOK	src/key_mod/ecryptfs_key_mod_passphrase.c	161;"	d	file:
ECRYPTFS_PASS_FILE_TOK	src/key_mod/ecryptfs_key_mod_passphrase.c	160;"	d	file:
ECRYPTFS_PERSISTENT_PASSWORD	src/include/ecryptfs.h	201;"	d
ECRYPTFS_POLICY_APPLIED	src/include/ecryptfs.h	474;"	d
ECRYPTFS_PREPARE_COMMIT_MODE	src/utils/test.c	160;"	d	file:
ECRYPTFS_PRIVATE_DIR	src/include/ecryptfs.h	645;"	d
ECRYPTFS_PRIVATE_KEY	src/include/ecryptfs.h	/^enum ecryptfs_token_types {ECRYPTFS_PASSWORD, ECRYPTFS_PRIVATE_KEY};$/;"	e	enum:ecryptfs_token_types
ECRYPTFS_PROCESSED	src/include/ecryptfs.h	244;"	d
ECRYPTFS_SALTLESS	src/include/ecryptfs.h	140;"	d
ECRYPTFS_SALT_SIZE	src/include/ecryptfs.h	85;"	d
ECRYPTFS_SALT_SIZE_HEX	src/include/ecryptfs.h	86;"	d
ECRYPTFS_SALT_TOK	src/key_mod/ecryptfs_key_mod_passphrase.c	162;"	d	file:
ECRYPTFS_SECURITY_WARNING	src/include/ecryptfs.h	477;"	d
ECRYPTFS_SEM_KEY	src/include/ecryptfs.h	595;"	d
ECRYPTFS_SESSION_KEY_ENCRYPTION_KEY_SET	src/include/ecryptfs.h	202;"	d
ECRYPTFS_SHM_KEY	src/include/ecryptfs.h	594;"	d
ECRYPTFS_SHM_SIZE	src/include/ecryptfs.h	596;"	d
ECRYPTFS_SIG_FLAG_NOENT	src/include/ecryptfs.h	578;"	d
ECRYPTFS_SIG_SIZE	src/include/ecryptfs.h	92;"	d
ECRYPTFS_SIG_SIZE_HEX	src/include/ecryptfs.h	93;"	d
ECRYPTFS_STRUCT_INITIALIZED	src/include/ecryptfs.h	473;"	d
ECRYPTFS_SUPPORTED_FILE_VERSION	src/include/ecryptfs.h	66;"	d
ECRYPTFS_TAG_11_PACKET_TYPE	src/include/ecryptfs.h	113;"	d
ECRYPTFS_TAG_1_PACKET_TYPE	src/include/ecryptfs.h	111;"	d
ECRYPTFS_TAG_3_PACKET_TYPE	src/include/ecryptfs.h	112;"	d
ECRYPTFS_TAG_64_PACKET	src/include/ecryptfs.h	146;"	d
ECRYPTFS_TAG_64_PACKET_TYPE	src/include/ecryptfs.h	114;"	d
ECRYPTFS_TAG_65_PACKET	src/include/ecryptfs.h	147;"	d
ECRYPTFS_TAG_65_PACKET_TYPE	src/include/ecryptfs.h	115;"	d
ECRYPTFS_TAG_66_PACKET	src/include/ecryptfs.h	148;"	d
ECRYPTFS_TAG_66_PACKET_TYPE	src/include/ecryptfs.h	116;"	d
ECRYPTFS_TAG_67_PACKET	src/include/ecryptfs.h	149;"	d
ECRYPTFS_TAG_67_PACKET_TYPE	src/include/ecryptfs.h	117;"	d
ECRYPTFS_TN_FLAG_REQ_FREE	src/include/decision_graph.h	68;"	d
ECRYPTFS_TSPI_DEFAULT_MAX_NUM_CONNECTIONS	src/key_mod/ecryptfs_key_mod_tspi.c	39;"	d	file:
ECRYPTFS_TSPI_MAX_WAIT_FOR_END	src/key_mod/ecryptfs_key_mod_tspi.c	684;"	d	file:
ECRYPTFS_TSPI_TICKET_CTX_INITIALIZED	src/key_mod/ecryptfs_key_mod_tspi.c	180;"	d	file:
ECRYPTFS_USERSPACE_SHOULD_TRY_TO_DECRYPT	src/include/ecryptfs.h	181;"	d
ECRYPTFS_USERSPACE_SHOULD_TRY_TO_ENCRYPT	src/include/ecryptfs.h	182;"	d
ECRYPTFS_VALIDATE_HEADER_SIZE	src/libecryptfs/ecryptfs-stat.c	108;"	d	file:
ECRYPTFS_VERSIONING_FILENAME_ENCRYPTION	src/include/ecryptfs.h	80;"	d
ECRYPTFS_VERSIONING_GCM	src/include/ecryptfs.h	81;"	d
ECRYPTFS_VERSIONING_HMAC	src/include/ecryptfs.h	79;"	d
ECRYPTFS_VERSIONING_MISCDEV	src/include/ecryptfs.h	78;"	d
ECRYPTFS_VERSIONING_MULTKEY	src/include/ecryptfs.h	77;"	d
ECRYPTFS_VERSIONING_PASSPHRASE	src/include/ecryptfs.h	72;"	d
ECRYPTFS_VERSIONING_PLAINTEXT_PASSTHROUGH	src/include/ecryptfs.h	74;"	d
ECRYPTFS_VERSIONING_POLICY	src/include/ecryptfs.h	75;"	d
ECRYPTFS_VERSIONING_PUBKEY	src/include/ecryptfs.h	73;"	d
ECRYPTFS_VERSIONING_XATTR	src/include/ecryptfs.h	76;"	d
ECRYPTFS_VERSION_MAJOR	src/include/ecryptfs.h	59;"	d
ECRYPTFS_VERSION_MINOR	src/include/ecryptfs.h	62;"	d
ECRYPTFS_VIEW_AS_ENCRYPTED	src/include/ecryptfs.h	482;"	d
ECRYPTFS_WARN_DEFAULT_SALT	src/include/ecryptfs.h	169;"	d
ECRYPTFS_WRITEPAGE_MODE	src/utils/test.c	161;"	d	file:
ECRYPTFS_ZOMBIE_SLEEP_SECONDS	src/include/ecryptfs.h	597;"	d
ECRYTPFS_H	src/include/ecryptfs.h	28;"	d
EGREP	src/pam_ecryptfs/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	src/utils/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ENABLE_NLS	config.h	12;"	d
ENOKEY	src/libecryptfs/key_management.c	51;"	d	file:
ETAGS	src/pam_ecryptfs/Makefile	/^ETAGS = etags$/;"	m
ETAGS	src/utils/Makefile	/^ETAGS = etags$/;"	m
EXEEXT	src/pam_ecryptfs/Makefile	/^EXEEXT = $/;"	m
EXEEXT	src/utils/Makefile	/^EXEEXT = $/;"	m
EXTRA_DIST	src/utils/Makefile	/^EXTRA_DIST = ecryptfsrc ecryptfs-rewrite-file ecryptfs-setup-private ecryptfs-setup-swap ecryptfs-mount-private ecryptfs-umount-private ecryptfs-migrate-home$/;"	m
FGREP	src/pam_ecryptfs/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FGREP	src/utils/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FSTYPE	src/utils/mount.ecryptfs_private.c	55;"	d	file:
GCC_HASCLASSVISIBILITY	src/libecryptfs-swig/libecryptfs_wrap.c	82;"	d	file:
GETTEXT_PACKAGE	config.h	15;"	d
GETTEXT_PACKAGE	src/pam_ecryptfs/Makefile	/^GETTEXT_PACKAGE = ecryptfs-utils$/;"	m
GETTEXT_PACKAGE	src/utils/Makefile	/^GETTEXT_PACKAGE = ecryptfs-utils$/;"	m
GMOFILES	src/pam_ecryptfs/Makefile	/^GMOFILES = $/;"	m
GMOFILES	src/utils/Makefile	/^GMOFILES = $/;"	m
GMSGFMT	src/pam_ecryptfs/Makefile	/^GMSGFMT = \/usr\/bin\/msgfmt$/;"	m
GMSGFMT	src/utils/Makefile	/^GMSGFMT = \/usr\/bin\/msgfmt$/;"	m
GPGME_CFLAGS	src/pam_ecryptfs/Makefile	/^GPGME_CFLAGS = $/;"	m
GPGME_CFLAGS	src/utils/Makefile	/^GPGME_CFLAGS = $/;"	m
GPGME_LIBS	src/pam_ecryptfs/Makefile	/^GPGME_LIBS = $/;"	m
GPGME_LIBS	src/utils/Makefile	/^GPGME_LIBS = $/;"	m
GPG_TOK	src/key_mod/ecryptfs_key_mod_gpg.c	224;"	d	file:
GREP	src/pam_ecryptfs/Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	src/utils/Makefile	/^GREP = \/bin\/grep$/;"	m
GTK_CFLAGS	src/pam_ecryptfs/Makefile	/^GTK_CFLAGS = $/;"	m
GTK_CFLAGS	src/utils/Makefile	/^GTK_CFLAGS = $/;"	m
GTK_LIBS	src/pam_ecryptfs/Makefile	/^GTK_LIBS = $/;"	m
GTK_LIBS	src/utils/Makefile	/^GTK_LIBS = $/;"	m
HAVE_BIND_TEXTDOMAIN_CODESET	config.h	18;"	d
HAVE_DCGETTEXT	config.h	21;"	d
HAVE_DLFCN_H	config.h	24;"	d
HAVE_GETTEXT	config.h	27;"	d
HAVE_INTTYPES_H	config.h	30;"	d
HAVE_LC_MESSAGES	config.h	33;"	d
HAVE_LIBDL	config.h	36;"	d
HAVE_LOCALE_H	config.h	39;"	d
HAVE_MEMORY_H	config.h	42;"	d
HAVE_STDINT_H	config.h	45;"	d
HAVE_STDLIB_H	config.h	48;"	d
HAVE_STRINGS_H	config.h	51;"	d
HAVE_STRING_H	config.h	54;"	d
HAVE_SYS_STAT_H	config.h	57;"	d
HAVE_SYS_TYPES_H	config.h	60;"	d
HAVE_UNISTD_H	config.h	63;"	d
INCLUDES	src/utils/Makefile	/^INCLUDES = -I$(top_srcdir)\/src\/include$/;"	m
INSTALL	src/pam_ecryptfs/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	src/utils/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	src/pam_ecryptfs/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	src/utils/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	src/pam_ecryptfs/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	src/utils/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	src/pam_ecryptfs/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	src/utils/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	src/pam_ecryptfs/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	src/utils/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	src/pam_ecryptfs/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	src/utils/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTOBJEXT	src/pam_ecryptfs/Makefile	/^INSTOBJEXT = .mo$/;"	m
INSTOBJEXT	src/utils/Makefile	/^INSTOBJEXT = .mo$/;"	m
INTLLIBS	src/pam_ecryptfs/Makefile	/^INTLLIBS = $/;"	m
INTLLIBS	src/utils/Makefile	/^INTLLIBS = $/;"	m
INTLTOOL_EXTRACT	src/pam_ecryptfs/Makefile	/^INTLTOOL_EXTRACT = \/usr\/bin\/intltool-extract$/;"	m
INTLTOOL_EXTRACT	src/utils/Makefile	/^INTLTOOL_EXTRACT = \/usr\/bin\/intltool-extract$/;"	m
INTLTOOL_MERGE	src/pam_ecryptfs/Makefile	/^INTLTOOL_MERGE = \/usr\/bin\/intltool-merge$/;"	m
INTLTOOL_MERGE	src/utils/Makefile	/^INTLTOOL_MERGE = \/usr\/bin\/intltool-merge$/;"	m
INTLTOOL_PERL	src/pam_ecryptfs/Makefile	/^INTLTOOL_PERL = \/usr\/bin\/perl$/;"	m
INTLTOOL_PERL	src/utils/Makefile	/^INTLTOOL_PERL = \/usr\/bin\/perl$/;"	m
INTLTOOL_UPDATE	src/pam_ecryptfs/Makefile	/^INTLTOOL_UPDATE = \/usr\/bin\/intltool-update$/;"	m
INTLTOOL_UPDATE	src/utils/Makefile	/^INTLTOOL_UPDATE = \/usr\/bin\/intltool-update$/;"	m
KEYCTL_ASSUME_AUTHORITY	src/include/keyutils.h	91;"	d
KEYCTL_CHOWN	src/include/keyutils.h	79;"	d
KEYCTL_CLEAR	src/include/keyutils.h	82;"	d
KEYCTL_DESCRIBE	src/include/keyutils.h	81;"	d
KEYCTL_GET_KEYRING_ID	src/include/keyutils.h	75;"	d
KEYCTL_INSTANTIATE	src/include/keyutils.h	87;"	d
KEYCTL_JOIN_SESSION_KEYRING	src/include/keyutils.h	76;"	d
KEYCTL_LINK	src/include/keyutils.h	83;"	d
KEYCTL_NEGATE	src/include/keyutils.h	88;"	d
KEYCTL_READ	src/include/keyutils.h	86;"	d
KEYCTL_REVOKE	src/include/keyutils.h	78;"	d
KEYCTL_SEARCH	src/include/keyutils.h	85;"	d
KEYCTL_SETPERM	src/include/keyutils.h	80;"	d
KEYCTL_SET_REQKEY_KEYRING	src/include/keyutils.h	89;"	d
KEYCTL_SET_TIMEOUT	src/include/keyutils.h	90;"	d
KEYCTL_UNLINK	src/include/keyutils.h	84;"	d
KEYCTL_UPDATE	src/include/keyutils.h	77;"	d
KEYUTILS_CFLAGS	src/pam_ecryptfs/Makefile	/^KEYUTILS_CFLAGS = $/;"	m
KEYUTILS_CFLAGS	src/utils/Makefile	/^KEYUTILS_CFLAGS = $/;"	m
KEYUTILS_H	src/include/keyutils.h	13;"	d
KEYUTILS_LIBS	src/pam_ecryptfs/Makefile	/^KEYUTILS_LIBS = -lkeyutils$/;"	m
KEYUTILS_LIBS	src/utils/Makefile	/^KEYUTILS_LIBS = -lkeyutils$/;"	m
KEY_BYTES	src/utils/mount.ecryptfs_private.c	53;"	d	file:
KEY_CIPHER	src/utils/mount.ecryptfs_private.c	54;"	d	file:
KEY_GRP_ALL	src/include/keyutils.h	64;"	d
KEY_GRP_LINK	src/include/keyutils.h	62;"	d
KEY_GRP_READ	src/include/keyutils.h	59;"	d
KEY_GRP_SEARCH	src/include/keyutils.h	61;"	d
KEY_GRP_SETATTR	src/include/keyutils.h	63;"	d
KEY_GRP_VIEW	src/include/keyutils.h	58;"	d
KEY_GRP_WRITE	src/include/keyutils.h	60;"	d
KEY_MOD_DATA_SET	src/key_mod/ecryptfs_key_mod_gpg.c	37;"	d	file:
KEY_OTH_ALL	src/include/keyutils.h	72;"	d
KEY_OTH_LINK	src/include/keyutils.h	70;"	d
KEY_OTH_READ	src/include/keyutils.h	67;"	d
KEY_OTH_SEARCH	src/include/keyutils.h	69;"	d
KEY_OTH_SETATTR	src/include/keyutils.h	71;"	d
KEY_OTH_VIEW	src/include/keyutils.h	66;"	d
KEY_OTH_WRITE	src/include/keyutils.h	68;"	d
KEY_POS_ALL	src/include/keyutils.h	48;"	d
KEY_POS_LINK	src/include/keyutils.h	46;"	d
KEY_POS_READ	src/include/keyutils.h	43;"	d
KEY_POS_SEARCH	src/include/keyutils.h	45;"	d
KEY_POS_SETATTR	src/include/keyutils.h	47;"	d
KEY_POS_VIEW	src/include/keyutils.h	42;"	d
KEY_POS_WRITE	src/include/keyutils.h	44;"	d
KEY_REQKEY_DEFL_DEFAULT	src/include/keyutils.h	31;"	d
KEY_REQKEY_DEFL_GROUP_KEYRING	src/include/keyutils.h	37;"	d
KEY_REQKEY_DEFL_NO_CHANGE	src/include/keyutils.h	30;"	d
KEY_REQKEY_DEFL_PROCESS_KEYRING	src/include/keyutils.h	33;"	d
KEY_REQKEY_DEFL_SESSION_KEYRING	src/include/keyutils.h	34;"	d
KEY_REQKEY_DEFL_THREAD_KEYRING	src/include/keyutils.h	32;"	d
KEY_REQKEY_DEFL_USER_KEYRING	src/include/keyutils.h	35;"	d
KEY_REQKEY_DEFL_USER_SESSION_KEYRING	src/include/keyutils.h	36;"	d
KEY_SPEC_GROUP_KEYRING	src/include/keyutils.h	26;"	d
KEY_SPEC_PROCESS_KEYRING	src/include/keyutils.h	22;"	d
KEY_SPEC_REQKEY_AUTH_KEY	src/include/keyutils.h	27;"	d
KEY_SPEC_SESSION_KEYRING	src/include/keyutils.h	23;"	d
KEY_SPEC_THREAD_KEYRING	src/include/keyutils.h	21;"	d
KEY_SPEC_USER_KEYRING	src/include/keyutils.h	24;"	d
KEY_SPEC_USER_SESSION_KEYRING	src/include/keyutils.h	25;"	d
KEY_USR_ALL	src/include/keyutils.h	56;"	d
KEY_USR_LINK	src/include/keyutils.h	54;"	d
KEY_USR_READ	src/include/keyutils.h	51;"	d
KEY_USR_SEARCH	src/include/keyutils.h	53;"	d
KEY_USR_SETATTR	src/include/keyutils.h	55;"	d
KEY_USR_VIEW	src/include/keyutils.h	50;"	d
KEY_USR_WRITE	src/include/keyutils.h	52;"	d
LATEX	src/pam_ecryptfs/Makefile	/^LATEX = $/;"	m
LATEX	src/utils/Makefile	/^LATEX = $/;"	m
LATEX2HTML	src/pam_ecryptfs/Makefile	/^LATEX2HTML = $/;"	m
LATEX2HTML	src/utils/Makefile	/^LATEX2HTML = $/;"	m
LD	src/pam_ecryptfs/Makefile	/^LD = \/usr\/bin\/ld$/;"	m
LD	src/utils/Makefile	/^LD = \/usr\/bin\/ld$/;"	m
LDFLAGS	src/pam_ecryptfs/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	src/utils/Makefile	/^LDFLAGS = $/;"	m
LIBECRYPTFS_LT_AGE	src/pam_ecryptfs/Makefile	/^LIBECRYPTFS_LT_AGE = 0$/;"	m
LIBECRYPTFS_LT_AGE	src/utils/Makefile	/^LIBECRYPTFS_LT_AGE = 0$/;"	m
LIBECRYPTFS_LT_CURRENT	src/pam_ecryptfs/Makefile	/^LIBECRYPTFS_LT_CURRENT = 0$/;"	m
LIBECRYPTFS_LT_CURRENT	src/utils/Makefile	/^LIBECRYPTFS_LT_CURRENT = 0$/;"	m
LIBECRYPTFS_LT_REVISION	src/pam_ecryptfs/Makefile	/^LIBECRYPTFS_LT_REVISION = 0$/;"	m
LIBECRYPTFS_LT_REVISION	src/utils/Makefile	/^LIBECRYPTFS_LT_REVISION = 0$/;"	m
LIBOBJS	src/pam_ecryptfs/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	src/utils/Makefile	/^LIBOBJS = $/;"	m
LIBS	src/pam_ecryptfs/Makefile	/^LIBS = -ldl $/;"	m
LIBS	src/utils/Makefile	/^LIBS = -ldl $/;"	m
LIBTOOL	src/pam_ecryptfs/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTOOL	src/utils/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LINK	src/pam_ecryptfs/Makefile	/^LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
LINK	src/utils/Makefile	/^LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
LIPO	src/pam_ecryptfs/Makefile	/^LIPO = $/;"	m
LIPO	src/utils/Makefile	/^LIPO = $/;"	m
LN_S	src/pam_ecryptfs/Makefile	/^LN_S = ln -s$/;"	m
LN_S	src/utils/Makefile	/^LN_S = ln -s$/;"	m
LOCALEDIR	src/pam_ecryptfs/Makefile	/^LOCALEDIR = ${prefix}\/${datadir}\/locale$/;"	m
LOCALEDIR	src/utils/Makefile	/^LOCALEDIR = ${prefix}\/${datadir}\/locale$/;"	m
LOCAL_CFLAGS	Android.mk	/^LOCAL_CFLAGS := \\$/;"	m
LOCAL_C_INCLUDES	Android.mk	/^LOCAL_C_INCLUDES := \\$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= ecryptfs-stat$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= ecryptfs_add_passphrase$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= ecryptfs_insert_wrapped_passphrase_into_keyring$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= ecryptfs_manager$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= ecryptfs_rewrap_passphrase$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= ecryptfs_unwrap_passphrase$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= ecryptfs_wrap_passphrase$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= libecryptfs$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= libecryptfs_key_mod_passphrase$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= mount.ecryptfs$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= test$/;"	m
LOCAL_MODULE_CLASS	Android.mk	/^LOCAL_MODULE_CLASS := SHARED_LIBRARIES$/;"	m
LOCAL_MODULE_TAGS	Android.mk	/^LOCAL_MODULE_TAGS := optional$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_PRELINK_MODULE	Android.mk	/^LOCAL_PRELINK_MODULE := false$/;"	m
LOCAL_SHARED_LIBRARIES	Android.mk	/^LOCAL_SHARED_LIBRARIES := \\$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOG	src/key_mod/ecryptfs_key_mod_tspi.c	59;"	d	file:
LTCOMPILE	src/pam_ecryptfs/Makefile	/^LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
LTCOMPILE	src/utils/Makefile	/^LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	src/pam_ecryptfs/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	src/utils/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	src/pam_ecryptfs/Makefile	/^LTLIBRARIES = $(pam_LTLIBRARIES)$/;"	m
LT_OBJDIR	config.h	67;"	d
MAGIC_ECRYPTFS_MARKER	src/include/ecryptfs.h	106;"	d
MAGIC_ECRYPTFS_MARKER_SIZE_BYTES	src/include/ecryptfs.h	107;"	d
MAGIC_ECRYPTFS_MARKER_STR	src/include/ecryptfs.h	103;"	d
MAINTAINERCLEANFILES	src/pam_ecryptfs/Makefile	/^MAINTAINERCLEANFILES = $(srcdir)\/Makefile.in$/;"	m
MAINTAINERCLEANFILES	src/utils/Makefile	/^MAINTAINERCLEANFILES = $(srcdir)\/Makefile.in$/;"	m
MAKEINFO	src/pam_ecryptfs/Makefile	/^MAKEINFO = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/missing --run makeinfo$/;"	m
MAKEINFO	src/utils/Makefile	/^MAKEINFO = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/missing --run makeinfo$/;"	m
MAXINT	src/utils/mount.ecryptfs_private.c	45;"	d	file:
MAX_BUF_LEN	src/libecryptfs/cipher_list.c	42;"	d	file:
MAX_FILE_SIZE	src/libecryptfs/cmd_ln_parser.c	41;"	d	file:
MAX_KEY_MOD_VALUE_SIZE	src/include/ecryptfs.h	110;"	d
MAX_NAME_SIZE	src/include/ecryptfs.h	109;"	d
MAX_NUM_MNT_OPT_NAMES	src/include/decision_graph.h	83;"	d
MAX_NUM_TRANSITIONS	src/include/decision_graph.h	109;"	d
MAX_TOK_LEN	src/libecryptfs/cmd_ln_parser.c	40;"	d	file:
MKDIR_P	src/pam_ecryptfs/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	src/utils/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKINSTALLDIRS	src/pam_ecryptfs/Makefile	/^MKINSTALLDIRS = .\/mkinstalldirs$/;"	m
MKINSTALLDIRS	src/utils/Makefile	/^MKINSTALLDIRS = .\/mkinstalldirs$/;"	m
MME_ABORT	src/include/ecryptfs.h	/^	MME_ABORT$/;"	e	enum:main_menu_enum
MME_GEN_PUBKEY	src/include/ecryptfs.h	/^	MME_GEN_PUBKEY,$/;"	e	enum:main_menu_enum
MME_MOUNT_PASSPHRASE	src/include/ecryptfs.h	/^	MME_MOUNT_PASSPHRASE,$/;"	e	enum:main_menu_enum
MME_MOUNT_PUBKEY	src/include/ecryptfs.h	/^	MME_MOUNT_PUBKEY,$/;"	e	enum:main_menu_enum
MME_NULL	src/include/ecryptfs.h	/^	MME_NULL,$/;"	e	enum:main_menu_enum
MOUNT_ERROR	src/include/decision_graph.h	80;"	d
MSGFMT	src/pam_ecryptfs/Makefile	/^MSGFMT = \/usr\/bin\/msgfmt$/;"	m
MSGFMT	src/utils/Makefile	/^MSGFMT = \/usr\/bin\/msgfmt$/;"	m
MSGFMT_OPTS	src/pam_ecryptfs/Makefile	/^MSGFMT_OPTS = -c$/;"	m
MSGFMT_OPTS	src/utils/Makefile	/^MSGFMT_OPTS = -c$/;"	m
MSGMERGE	src/pam_ecryptfs/Makefile	/^MSGMERGE = \/usr\/bin\/msgmerge$/;"	m
MSGMERGE	src/utils/Makefile	/^MSGMERGE = \/usr\/bin\/msgmerge$/;"	m
MTAB_FULLPATH	src/libecryptfs/cipher_list.c	43;"	d	file:
NETLINK_ECRYPTFS	src/include/ecryptfs.h	54;"	d
NM	src/pam_ecryptfs/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NM	src/utils/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	src/pam_ecryptfs/Makefile	/^NMEDIT = $/;"	m
NMEDIT	src/utils/Makefile	/^NMEDIT = $/;"	m
NORMAL_INSTALL	src/pam_ecryptfs/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	src/utils/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	src/pam_ecryptfs/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	src/utils/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NULL_TOK	src/include/decision_graph.h	78;"	d
NUM_REQUIRED_ARGS	src/utils/mount.ecryptfs.c	43;"	d	file:
NV_MAX_CHILDREN	src/include/ecryptfs.h	250;"	d
OBJDUMP	src/pam_ecryptfs/Makefile	/^OBJDUMP = objdump$/;"	m
OBJDUMP	src/utils/Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	src/pam_ecryptfs/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	src/utils/Makefile	/^OBJEXT = o$/;"	m
OPENSSL_CFLAGS	src/pam_ecryptfs/Makefile	/^OPENSSL_CFLAGS = $/;"	m
OPENSSL_CFLAGS	src/utils/Makefile	/^OPENSSL_CFLAGS = $/;"	m
OPENSSL_LIBS	src/pam_ecryptfs/Makefile	/^OPENSSL_LIBS = $/;"	m
OPENSSL_LIBS	src/utils/Makefile	/^OPENSSL_LIBS = $/;"	m
OTOOL	src/pam_ecryptfs/Makefile	/^OTOOL = $/;"	m
OTOOL	src/utils/Makefile	/^OTOOL = $/;"	m
OTOOL64	src/pam_ecryptfs/Makefile	/^OTOOL64 = $/;"	m
OTOOL64	src/utils/Makefile	/^OTOOL64 = $/;"	m
PACKAGE	config.h	73;"	d
PACKAGE	src/pam_ecryptfs/Makefile	/^PACKAGE = ecryptfs-utils$/;"	m
PACKAGE	src/utils/Makefile	/^PACKAGE = ecryptfs-utils$/;"	m
PACKAGE_BUGREPORT	config.h	76;"	d
PACKAGE_BUGREPORT	src/pam_ecryptfs/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_BUGREPORT	src/utils/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_NAME	config.h	79;"	d
PACKAGE_NAME	src/pam_ecryptfs/Makefile	/^PACKAGE_NAME = ecryptfs-utils$/;"	m
PACKAGE_NAME	src/utils/Makefile	/^PACKAGE_NAME = ecryptfs-utils$/;"	m
PACKAGE_STRING	config.h	82;"	d
PACKAGE_STRING	src/pam_ecryptfs/Makefile	/^PACKAGE_STRING = ecryptfs-utils 83$/;"	m
PACKAGE_STRING	src/utils/Makefile	/^PACKAGE_STRING = ecryptfs-utils 83$/;"	m
PACKAGE_TARNAME	config.h	85;"	d
PACKAGE_TARNAME	src/pam_ecryptfs/Makefile	/^PACKAGE_TARNAME = ecryptfs-utils$/;"	m
PACKAGE_TARNAME	src/utils/Makefile	/^PACKAGE_TARNAME = ecryptfs-utils$/;"	m
PACKAGE_URL	config.h	88;"	d
PACKAGE_URL	src/pam_ecryptfs/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	src/utils/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	config.h	91;"	d
PACKAGE_VERSION	src/pam_ecryptfs/Makefile	/^PACKAGE_VERSION = 83$/;"	m
PACKAGE_VERSION	src/utils/Makefile	/^PACKAGE_VERSION = 83$/;"	m
PAM_CFLAGS	src/pam_ecryptfs/Makefile	/^PAM_CFLAGS = $/;"	m
PAM_CFLAGS	src/utils/Makefile	/^PAM_CFLAGS = $/;"	m
PAM_LIBS	src/pam_ecryptfs/Makefile	/^PAM_LIBS = $/;"	m
PAM_LIBS	src/utils/Makefile	/^PAM_LIBS = $/;"	m
PARAMETER_SET	src/include/decision_graph.h	100;"	d
PATH_SEPARATOR	src/pam_ecryptfs/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	src/utils/Makefile	/^PATH_SEPARATOR = :$/;"	m
PGP_DIGEST_ALGO_SHA512	src/include/ecryptfs.h	134;"	d
PKCS11H_GLOBAL_TOK_LOGLEVEL	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1200;"	d	file:
PKCS11H_GLOBAL_TOK_PINCACHE	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1201;"	d	file:
PKCS11H_KEY_TOK_DEFAULT_PASS	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1349;"	d	file:
PKCS11H_KEY_TOK_DEFAULT_X509_FILE	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1350;"	d	file:
PKCS11H_KEY_TOK_ID	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1345;"	d	file:
PKCS11H_KEY_TOK_PASSWD	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1346;"	d	file:
PKCS11H_KEY_TOK_PASS_ENV	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1347;"	d	file:
PKCS11H_KEY_TOK_PASS_STDIN	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1348;"	d	file:
PKCS11H_KEY_TOK_TOK	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1344;"	d	file:
PKCS11H_PROVIER_TOK_CERT_PRIVATE	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1239;"	d	file:
PKCS11H_PROVIER_TOK_END	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1241;"	d	file:
PKCS11H_PROVIER_TOK_LIBRARY	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1237;"	d	file:
PKCS11H_PROVIER_TOK_NAME	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1236;"	d	file:
PKCS11H_PROVIER_TOK_PRIVATE_MASK	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1240;"	d	file:
PKCS11H_PROVIER_TOK_PROT_AUTH	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1238;"	d	file:
PKCS11H_PROVIER_TOK_PROVIDER	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	1235;"	d	file:
PKCS11_HELPER_CFLAGS	src/pam_ecryptfs/Makefile	/^PKCS11_HELPER_CFLAGS = $/;"	m
PKCS11_HELPER_CFLAGS	src/utils/Makefile	/^PKCS11_HELPER_CFLAGS = $/;"	m
PKCS11_HELPER_LIBS	src/pam_ecryptfs/Makefile	/^PKCS11_HELPER_LIBS = $/;"	m
PKCS11_HELPER_LIBS	src/utils/Makefile	/^PKCS11_HELPER_LIBS = $/;"	m
PKG_CONFIG	src/pam_ecryptfs/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG	src/utils/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
POD2MAN	src/pam_ecryptfs/Makefile	/^POD2MAN = \/usr\/bin\/pod2man$/;"	m
POD2MAN	src/utils/Makefile	/^POD2MAN = \/usr\/bin\/pod2man$/;"	m
POFILES	src/pam_ecryptfs/Makefile	/^POFILES = $/;"	m
POFILES	src/utils/Makefile	/^POFILES = $/;"	m
POST_INSTALL	src/pam_ecryptfs/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	src/utils/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	src/pam_ecryptfs/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	src/utils/Makefile	/^POST_UNINSTALL = :$/;"	m
POSUB	src/pam_ecryptfs/Makefile	/^POSUB = po$/;"	m
POSUB	src/utils/Makefile	/^POSUB = po$/;"	m
PO_IN_DATADIR_FALSE	src/pam_ecryptfs/Makefile	/^PO_IN_DATADIR_FALSE = $/;"	m
PO_IN_DATADIR_FALSE	src/utils/Makefile	/^PO_IN_DATADIR_FALSE = $/;"	m
PO_IN_DATADIR_TRUE	src/pam_ecryptfs/Makefile	/^PO_IN_DATADIR_TRUE = $/;"	m
PO_IN_DATADIR_TRUE	src/utils/Makefile	/^PO_IN_DATADIR_TRUE = $/;"	m
PRE_INSTALL	src/pam_ecryptfs/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	src/utils/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	src/pam_ecryptfs/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	src/utils/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRINT_ERR	src/utils/ecryptfs_generate_tpm_key.c	48;"	d	file:
PRINT_TSS_ERR	src/utils/ecryptfs_generate_tpm_key.c	49;"	d	file:
PRIVATE_DIR	src/pam_ecryptfs/pam_ecryptfs.c	44;"	d	file:
PROGRAMS	src/utils/Makefile	/^PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS) $(rootsbin_PROGRAMS)$/;"	m
PS2PDF	src/pam_ecryptfs/Makefile	/^PS2PDF = \/usr\/bin\/ps2pdf$/;"	m
PS2PDF	src/utils/Makefile	/^PS2PDF = \/usr\/bin\/ps2pdf$/;"	m
PUSHSER1	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	122;"	d	file:
PUSHSER1	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	149;"	d	file:
PUSHSERN	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	123;"	d	file:
PUSHSERN	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	150;"	d	file:
PYTHON	src/pam_ecryptfs/Makefile	/^PYTHON = \/usr\/bin\/python$/;"	m
PYTHON	src/utils/Makefile	/^PYTHON = \/usr\/bin\/python$/;"	m
PYTHON_CPPFLAGS	src/pam_ecryptfs/Makefile	/^PYTHON_CPPFLAGS = -I\/usr\/include\/python2.6$/;"	m
PYTHON_CPPFLAGS	src/utils/Makefile	/^PYTHON_CPPFLAGS = -I\/usr\/include\/python2.6$/;"	m
PYTHON_EXEC_PREFIX	src/pam_ecryptfs/Makefile	/^PYTHON_EXEC_PREFIX = ${exec_prefix}$/;"	m
PYTHON_EXEC_PREFIX	src/utils/Makefile	/^PYTHON_EXEC_PREFIX = ${exec_prefix}$/;"	m
PYTHON_EXTRA_LDFLAGS	src/pam_ecryptfs/Makefile	/^PYTHON_EXTRA_LDFLAGS = -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions$/;"	m
PYTHON_EXTRA_LDFLAGS	src/utils/Makefile	/^PYTHON_EXTRA_LDFLAGS = -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions$/;"	m
PYTHON_EXTRA_LIBS	src/pam_ecryptfs/Makefile	/^PYTHON_EXTRA_LIBS = -lssl -lcrypto  -lssl -lcrypto      -L\/usr\/lib -lz -lpthread -ldl  -lutil$/;"	m
PYTHON_EXTRA_LIBS	src/utils/Makefile	/^PYTHON_EXTRA_LIBS = -lssl -lcrypto  -lssl -lcrypto      -L\/usr\/lib -lz -lpthread -ldl  -lutil$/;"	m
PYTHON_LDFLAGS	src/pam_ecryptfs/Makefile	/^PYTHON_LDFLAGS = -L\/usr\/lib\/python2.6 -lpython2.6$/;"	m
PYTHON_LDFLAGS	src/utils/Makefile	/^PYTHON_LDFLAGS = -L\/usr\/lib\/python2.6 -lpython2.6$/;"	m
PYTHON_PLATFORM	src/pam_ecryptfs/Makefile	/^PYTHON_PLATFORM = linux2$/;"	m
PYTHON_PLATFORM	src/utils/Makefile	/^PYTHON_PLATFORM = linux2$/;"	m
PYTHON_PREFIX	src/pam_ecryptfs/Makefile	/^PYTHON_PREFIX = ${prefix}$/;"	m
PYTHON_PREFIX	src/utils/Makefile	/^PYTHON_PREFIX = ${prefix}$/;"	m
PYTHON_SITE_PKG	src/pam_ecryptfs/Makefile	/^PYTHON_SITE_PKG = \/usr\/lib\/python2.6\/dist-packages$/;"	m
PYTHON_SITE_PKG	src/utils/Makefile	/^PYTHON_SITE_PKG = \/usr\/lib\/python2.6\/dist-packages$/;"	m
PYTHON_VERSION	src/pam_ecryptfs/Makefile	/^PYTHON_VERSION = $/;"	m
PYTHON_VERSION	src/utils/Makefile	/^PYTHON_VERSION = $/;"	m
PY_SSIZE_T_MAX	src/libecryptfs-swig/libecryptfs_wrap.c	798;"	d	file:
PY_SSIZE_T_MIN	src/libecryptfs-swig/libecryptfs_wrap.c	799;"	d	file:
PyBool_FromLong	src/libecryptfs-swig/libecryptfs_wrap.c	/^PyObject *PyBool_FromLong(long ok)$/;"	f	file:
PyExc_StopIteration	src/libecryptfs-swig/libecryptfs_wrap.c	753;"	d	file:
PyModule_AddObject	src/libecryptfs-swig/libecryptfs_wrap.c	/^PyModule_AddObject(PyObject *m, char *name, PyObject *o)$/;"	f
PyOS_snprintf	src/libecryptfs-swig/libecryptfs_wrap.c	717;"	d	file:
PyOS_snprintf	src/libecryptfs-swig/libecryptfs_wrap.c	719;"	d	file:
PyObject_DEL	src/libecryptfs-swig/libecryptfs_wrap.c	747;"	d	file:
PyObject_Del	src/libecryptfs-swig/libecryptfs_wrap.c	744;"	d	file:
PyObject_GenericGetAttr	src/libecryptfs-swig/libecryptfs_wrap.c	756;"	d	file:
PySequence_Size	src/libecryptfs-swig/libecryptfs_wrap.c	777;"	d	file:
PyString_AsStringAndSize	src/libecryptfs-swig/libecryptfs_wrap.c	770;"	d	file:
PyString_FromFormat	src/libecryptfs-swig/libecryptfs_wrap.c	/^PyString_FromFormat(const char *fmt, ...) {$/;"	f	file:
PySwigClientData	src/libecryptfs-swig/libecryptfs_wrap.c	/^} PySwigClientData;$/;"	t	typeref:struct:__anon1	file:
PySwigClientData_Del	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigClientData_Del(PySwigClientData* data)$/;"	f
PySwigClientData_New	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigClientData_New(PyObject* obj)$/;"	f
PySwigObject	src/libecryptfs-swig/libecryptfs_wrap.c	/^} PySwigObject;$/;"	t	typeref:struct:__anon2	file:
PySwigObject_Check	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_Check(PyObject *op) {$/;"	f
PySwigObject_GetDesc	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_GetDesc(PyObject *self)$/;"	f
PySwigObject_New	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_New(void *ptr, swig_type_info *ty, int own)$/;"	f
PySwigObject_acquire	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_acquire(PyObject *v)$/;"	f
PySwigObject_append	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_append(PyObject* v, PyObject* next)$/;"	f
PySwigObject_compare	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_compare(PySwigObject *v, PySwigObject *w)$/;"	f
PySwigObject_dealloc	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_dealloc(PyObject *v)$/;"	f
PySwigObject_disown	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_disown(PyObject *v)$/;"	f
PySwigObject_format	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_format(const char* fmt, PySwigObject *v)$/;"	f
PySwigObject_getattr	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_getattr(PySwigObject *sobj,char *name)$/;"	f
PySwigObject_hex	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_hex(PySwigObject *v)$/;"	f
PySwigObject_long	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_long(PySwigObject *v)$/;"	f
PySwigObject_next	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_next(PyObject* v)$/;"	f
PySwigObject_oct	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_oct(PySwigObject *v)$/;"	f
PySwigObject_own	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_own(PyObject *v, PyObject *args)$/;"	f
PySwigObject_print	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_print(PySwigObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))$/;"	f
PySwigObject_repr	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_repr(PySwigObject *v)$/;"	f
PySwigObject_str	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_str(PySwigObject *v)$/;"	f
PySwigObject_type	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigObject_type(void) {$/;"	f
PySwigPacked	src/libecryptfs-swig/libecryptfs_wrap.c	/^} PySwigPacked;$/;"	t	typeref:struct:__anon3	file:
PySwigPacked_Check	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigPacked_Check(PyObject *op) {$/;"	f
PySwigPacked_New	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigPacked_New(void *ptr, size_t size, swig_type_info *ty)$/;"	f
PySwigPacked_UnpackData	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)$/;"	f
PySwigPacked_compare	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)$/;"	f
PySwigPacked_dealloc	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigPacked_dealloc(PyObject *v)$/;"	f
PySwigPacked_print	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigPacked_print(PySwigPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))$/;"	f
PySwigPacked_repr	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigPacked_repr(PySwigPacked *v)$/;"	f
PySwigPacked_str	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigPacked_str(PySwigPacked *v)$/;"	f
PySwigPacked_type	src/libecryptfs-swig/libecryptfs_wrap.c	/^PySwigPacked_type(void) {$/;"	f
Py_None	src/libecryptfs-swig/libecryptfs_wrap.c	1188;"	d	file:
Py_None	src/libecryptfs-swig/libecryptfs_wrap.c	1189;"	d	file:
Py_NotImplemented	src/libecryptfs-swig/libecryptfs_wrap.c	762;"	d	file:
Py_ssize_t	src/libecryptfs-swig/libecryptfs_wrap.c	/^typedef int Py_ssize_t;$/;"	t	file:
RANLIB	src/pam_ecryptfs/Makefile	/^RANLIB = ranlib$/;"	m
RANLIB	src/utils/Makefile	/^RANLIB = ranlib$/;"	m
SCRIPTS	src/utils/Makefile	/^SCRIPTS = $(bin_SCRIPTS)$/;"	m
SED	src/pam_ecryptfs/Makefile	/^SED = \/bin\/sed$/;"	m
SED	src/utils/Makefile	/^SED = \/bin\/sed$/;"	m
SET_MAKE	src/pam_ecryptfs/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	src/utils/Makefile	/^SET_MAKE = $/;"	m
SHA1_DIGEST_LENGTH	src/include/ecryptfs.h	131;"	d
SHA512_DIGEST_LENGTH	src/include/ecryptfs.h	127;"	d
SHELL	src/pam_ecryptfs/Makefile	/^SHELL = \/bin\/bash$/;"	m
SHELL	src/utils/Makefile	/^SHELL = \/bin\/bash$/;"	m
SOURCES	src/pam_ecryptfs/Makefile	/^SOURCES = $(pam_ecryptfs_la_SOURCES)$/;"	m
SOURCES	src/utils/Makefile	/^SOURCES = $(ecryptfs_add_passphrase_SOURCES) \\$/;"	m
SRK_UUID	src/utils/ecryptfs_generate_tpm_key.c	/^const TSS_UUID SRK_UUID = TSS_UUID_SRK;$/;"	v
SSL_FD_PASSWD_TOK	src/key_mod/ecryptfs_key_mod_openssl.c	770;"	d	file:
SSL_FILE_PASSWD_TOK	src/key_mod/ecryptfs_key_mod_openssl.c	769;"	d	file:
SSL_KEY_FILE_TOK	src/key_mod/ecryptfs_key_mod_openssl.c	766;"	d	file:
SSL_KEY_SOURCE_TOK	src/key_mod/ecryptfs_key_mod_openssl.c	765;"	d	file:
SSL_PASSPHRASE_METHOD_TOK	src/key_mod/ecryptfs_key_mod_openssl.c	767;"	d	file:
SSL_USER_PROVIDED_PASSWD_TOK	src/key_mod/ecryptfs_key_mod_openssl.c	768;"	d	file:
STDC_HEADERS	config.h	94;"	d
STDIN_REQUIRED	src/include/decision_graph.h	99;"	d
STRIP	src/pam_ecryptfs/Makefile	/^STRIP = strip$/;"	m
STRIP	src/utils/Makefile	/^STRIP = strip$/;"	m
SWIG	src/pam_ecryptfs/Makefile	/^SWIG = echo "Error: SWIG is not installed. You should look at http:\/\/www.swig.org" ; false$/;"	m
SWIG	src/utils/Makefile	/^SWIG = echo "Error: SWIG is not installed. You should look at http:\/\/www.swig.org" ; false$/;"	m
SWIGEXPORT	src/libecryptfs-swig/libecryptfs_wrap.c	89;"	d	file:
SWIGEXPORT	src/libecryptfs-swig/libecryptfs_wrap.c	91;"	d	file:
SWIGEXPORT	src/libecryptfs-swig/libecryptfs_wrap.c	95;"	d	file:
SWIGEXPORT	src/libecryptfs-swig/libecryptfs_wrap.c	97;"	d	file:
SWIGINLINE	src/libecryptfs-swig/libecryptfs_wrap.c	34;"	d	file:
SWIGINLINE	src/libecryptfs-swig/libecryptfs_wrap.c	36;"	d	file:
SWIGINTERN	src/libecryptfs-swig/libecryptfs_wrap.c	71;"	d	file:
SWIGINTERNINLINE	src/libecryptfs-swig/libecryptfs_wrap.c	76;"	d	file:
SWIGPYTHON	src/libecryptfs-swig/libecryptfs_wrap.c	11;"	d	file:
SWIGRUNTIME	src/libecryptfs-swig/libecryptfs_wrap.c	156;"	d	file:
SWIGRUNTIMEINLINE	src/libecryptfs-swig/libecryptfs_wrap.c	160;"	d	file:
SWIGSTDCALL	src/libecryptfs-swig/libecryptfs_wrap.c	105;"	d	file:
SWIGSTDCALL	src/libecryptfs-swig/libecryptfs_wrap.c	107;"	d	file:
SWIGTEMPLATEDISAMBIGUATOR	src/libecryptfs-swig/libecryptfs_wrap.c	21;"	d	file:
SWIGTEMPLATEDISAMBIGUATOR	src/libecryptfs-swig/libecryptfs_wrap.c	25;"	d	file:
SWIGTEMPLATEDISAMBIGUATOR	src/libecryptfs-swig/libecryptfs_wrap.c	27;"	d	file:
SWIGTYPE_p_char	src/libecryptfs-swig/libecryptfs_wrap.c	2483;"	d	file:
SWIGUNUSED	src/libecryptfs-swig/libecryptfs_wrap.c	44;"	d	file:
SWIGUNUSED	src/libecryptfs-swig/libecryptfs_wrap.c	46;"	d	file:
SWIGUNUSED	src/libecryptfs-swig/libecryptfs_wrap.c	49;"	d	file:
SWIGUNUSED	src/libecryptfs-swig/libecryptfs_wrap.c	51;"	d	file:
SWIGUNUSEDPARM	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {$/;"	f
SWIGUNUSEDPARM	src/libecryptfs-swig/libecryptfs_wrap.c	63;"	d	file:
SWIGUNUSEDPARM	src/libecryptfs-swig/libecryptfs_wrap.c	65;"	d	file:
SWIGVERSION	src/libecryptfs-swig/libecryptfs_wrap.c	2504;"	d	file:
SWIG_AcquirePtr	src/libecryptfs-swig/libecryptfs_wrap.c	996;"	d	file:
SWIG_AddCast	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIGINTERNINLINE int SWIG_AddCast(int r) { $/;"	f
SWIG_AddCast	src/libecryptfs-swig/libecryptfs_wrap.c	298;"	d	file:
SWIG_AddNewMask	src/libecryptfs-swig/libecryptfs_wrap.c	273;"	d	file:
SWIG_AddTmpMask	src/libecryptfs-swig/libecryptfs_wrap.c	276;"	d	file:
SWIG_ArgError	src/libecryptfs-swig/libecryptfs_wrap.c	259;"	d	file:
SWIG_AsCharPtrAndSize	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)$/;"	f
SWIG_AttributeError	src/libecryptfs-swig/libecryptfs_wrap.c	707;"	d	file:
SWIG_BADOBJ	src/libecryptfs-swig/libecryptfs_wrap.c	268;"	d	file:
SWIG_BUFFER_SIZE	src/libecryptfs-swig/libecryptfs_wrap.c	165;"	d	file:
SWIG_CASTRANKLIMIT	src/libecryptfs-swig/libecryptfs_wrap.c	262;"	d	file:
SWIG_CASTRANKMASK	src/libecryptfs-swig/libecryptfs_wrap.c	289;"	d	file:
SWIG_CAST_NEW_MEMORY	src/libecryptfs-swig/libecryptfs_wrap.c	170;"	d	file:
SWIG_CastRank	src/libecryptfs-swig/libecryptfs_wrap.c	290;"	d	file:
SWIG_CheckImplicit	src/libecryptfs-swig/libecryptfs_wrap.c	995;"	d	file:
SWIG_CheckState	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIGINTERNINLINE int SWIG_CheckState(int r) { $/;"	f
SWIG_CheckState	src/libecryptfs-swig/libecryptfs_wrap.c	299;"	d	file:
SWIG_ConvertFunctionPtr	src/libecryptfs-swig/libecryptfs_wrap.c	1008;"	d	file:
SWIG_ConvertInstance	src/libecryptfs-swig/libecryptfs_wrap.c	1004;"	d	file:
SWIG_ConvertMember	src/libecryptfs-swig/libecryptfs_wrap.c	1012;"	d	file:
SWIG_ConvertPacked	src/libecryptfs-swig/libecryptfs_wrap.c	1000;"	d	file:
SWIG_ConvertPtr	src/libecryptfs-swig/libecryptfs_wrap.c	992;"	d	file:
SWIG_ConvertPtrAndOwn	src/libecryptfs-swig/libecryptfs_wrap.c	993;"	d	file:
SWIG_DelNewMask	src/libecryptfs-swig/libecryptfs_wrap.c	274;"	d	file:
SWIG_DelTmpMask	src/libecryptfs-swig/libecryptfs_wrap.c	277;"	d	file:
SWIG_DivisionByZero	src/libecryptfs-swig/libecryptfs_wrap.c	702;"	d	file:
SWIG_ERROR	src/libecryptfs-swig/libecryptfs_wrap.c	257;"	d	file:
SWIG_EXPAND_AND_QUOTE_STRING	src/libecryptfs-swig/libecryptfs_wrap.c	140;"	d	file:
SWIG_Error	src/libecryptfs-swig/libecryptfs_wrap.c	1025;"	d	file:
SWIG_ErrorType	src/libecryptfs-swig/libecryptfs_wrap.c	1024;"	d	file:
SWIG_From_int	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_From_int  (int value)$/;"	f
SWIG_From_long	src/libecryptfs-swig/libecryptfs_wrap.c	2586;"	d	file:
SWIG_GetModule	src/libecryptfs-swig/libecryptfs_wrap.c	1018;"	d	file:
SWIG_IOError	src/libecryptfs-swig/libecryptfs_wrap.c	698;"	d	file:
SWIG_IndexError	src/libecryptfs-swig/libecryptfs_wrap.c	700;"	d	file:
SWIG_InitializeModule	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_InitializeModule(void *clientdata) {$/;"	f
SWIG_InstallConstants	src/libecryptfs-swig/libecryptfs_wrap.c	2978;"	d	file:
SWIG_IsNewObj	src/libecryptfs-swig/libecryptfs_wrap.c	275;"	d	file:
SWIG_IsOK	src/libecryptfs-swig/libecryptfs_wrap.c	258;"	d	file:
SWIG_IsTmpObj	src/libecryptfs-swig/libecryptfs_wrap.c	278;"	d	file:
SWIG_LIB	src/pam_ecryptfs/Makefile	/^SWIG_LIB = $/;"	m
SWIG_LIB	src/utils/Makefile	/^SWIG_LIB = $/;"	m
SWIG_MAXCASTRANK	src/libecryptfs-swig/libecryptfs_wrap.c	287;"	d	file:
SWIG_MangledTypeQuery	src/libecryptfs-swig/libecryptfs_wrap.c	2487;"	d	file:
SWIG_MangledTypeQueryModule	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_MangledTypeQueryModule(swig_module_info *start, $/;"	f
SWIG_MemoryError	src/libecryptfs-swig/libecryptfs_wrap.c	708;"	d	file:
SWIG_MustGetPtr	src/libecryptfs-swig/libecryptfs_wrap.c	2366;"	d	file:
SWIG_NEWOBJ	src/libecryptfs-swig/libecryptfs_wrap.c	270;"	d	file:
SWIG_NEWOBJMASK	src/libecryptfs-swig/libecryptfs_wrap.c	264;"	d	file:
SWIG_NewClientData	src/libecryptfs-swig/libecryptfs_wrap.c	1020;"	d	file:
SWIG_NewFunctionPtrObj	src/libecryptfs-swig/libecryptfs_wrap.c	1009;"	d	file:
SWIG_NewInstanceObj	src/libecryptfs-swig/libecryptfs_wrap.c	1005;"	d	file:
SWIG_NewMemberObj	src/libecryptfs-swig/libecryptfs_wrap.c	1013;"	d	file:
SWIG_NewPackedObj	src/libecryptfs-swig/libecryptfs_wrap.c	1001;"	d	file:
SWIG_NewPointerObj	src/libecryptfs-swig/libecryptfs_wrap.c	994;"	d	file:
SWIG_NullReferenceError	src/libecryptfs-swig/libecryptfs_wrap.c	709;"	d	file:
SWIG_OK	src/libecryptfs-swig/libecryptfs_wrap.c	256;"	d	file:
SWIG_OLDOBJ	src/libecryptfs-swig/libecryptfs_wrap.c	269;"	d	file:
SWIG_OverflowError	src/libecryptfs-swig/libecryptfs_wrap.c	703;"	d	file:
SWIG_POINTER_DISOWN	src/libecryptfs-swig/libecryptfs_wrap.c	169;"	d	file:
SWIG_POINTER_EXCEPTION	src/libecryptfs-swig/libecryptfs_wrap.c	2364;"	d	file:
SWIG_POINTER_IMPLICIT_CONV	src/libecryptfs-swig/libecryptfs_wrap.c	1168;"	d	file:
SWIG_POINTER_NEW	src/libecryptfs-swig/libecryptfs_wrap.c	1166;"	d	file:
SWIG_POINTER_NOSHADOW	src/libecryptfs-swig/libecryptfs_wrap.c	1165;"	d	file:
SWIG_POINTER_OWN	src/libecryptfs-swig/libecryptfs_wrap.c	173;"	d	file:
SWIG_PYBUFFER_SIZE	src/libecryptfs-swig/libecryptfs_wrap.c	727;"	d	file:
SWIG_PYTHON_BUILD_NONE	src/libecryptfs-swig/libecryptfs_wrap.c	1181;"	d	file:
SWIG_PYTHON_CPPFLAGS	src/pam_ecryptfs/Makefile	/^SWIG_PYTHON_CPPFLAGS = -I\/usr\/include\/python2.6$/;"	m
SWIG_PYTHON_CPPFLAGS	src/utils/Makefile	/^SWIG_PYTHON_CPPFLAGS = -I\/usr\/include\/python2.6$/;"	m
SWIG_PYTHON_DIRECTOR_NO_VTABLE	src/libecryptfs-swig/libecryptfs_wrap.c	12;"	d	file:
SWIG_PYTHON_INITIALIZE_THREADS	src/libecryptfs-swig/libecryptfs_wrap.c	885;"	d	file:
SWIG_PYTHON_INITIALIZE_THREADS	src/libecryptfs-swig/libecryptfs_wrap.c	916;"	d	file:
SWIG_PYTHON_INITIALIZE_THREADS	src/libecryptfs-swig/libecryptfs_wrap.c	932;"	d	file:
SWIG_PYTHON_OPT	src/pam_ecryptfs/Makefile	/^SWIG_PYTHON_OPT = -python$/;"	m
SWIG_PYTHON_OPT	src/utils/Makefile	/^SWIG_PYTHON_OPT = -python$/;"	m
SWIG_PYTHON_THREADS	src/libecryptfs-swig/libecryptfs_wrap.c	874;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_ALLOW	src/libecryptfs-swig/libecryptfs_wrap.c	906;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_ALLOW	src/libecryptfs-swig/libecryptfs_wrap.c	911;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_ALLOW	src/libecryptfs-swig/libecryptfs_wrap.c	925;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_ALLOW	src/libecryptfs-swig/libecryptfs_wrap.c	935;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_BLOCK	src/libecryptfs-swig/libecryptfs_wrap.c	904;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_BLOCK	src/libecryptfs-swig/libecryptfs_wrap.c	909;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_BLOCK	src/libecryptfs-swig/libecryptfs_wrap.c	919;"	d	file:
SWIG_PYTHON_THREAD_BEGIN_BLOCK	src/libecryptfs-swig/libecryptfs_wrap.c	933;"	d	file:
SWIG_PYTHON_THREAD_END_ALLOW	src/libecryptfs-swig/libecryptfs_wrap.c	907;"	d	file:
SWIG_PYTHON_THREAD_END_ALLOW	src/libecryptfs-swig/libecryptfs_wrap.c	912;"	d	file:
SWIG_PYTHON_THREAD_END_ALLOW	src/libecryptfs-swig/libecryptfs_wrap.c	928;"	d	file:
SWIG_PYTHON_THREAD_END_ALLOW	src/libecryptfs-swig/libecryptfs_wrap.c	936;"	d	file:
SWIG_PYTHON_THREAD_END_BLOCK	src/libecryptfs-swig/libecryptfs_wrap.c	905;"	d	file:
SWIG_PYTHON_THREAD_END_BLOCK	src/libecryptfs-swig/libecryptfs_wrap.c	910;"	d	file:
SWIG_PYTHON_THREAD_END_BLOCK	src/libecryptfs-swig/libecryptfs_wrap.c	922;"	d	file:
SWIG_PYTHON_THREAD_END_BLOCK	src/libecryptfs-swig/libecryptfs_wrap.c	934;"	d	file:
SWIG_PYTHON_USE_GIL	src/libecryptfs-swig/libecryptfs_wrap.c	880;"	d	file:
SWIG_PY_BINARY	src/libecryptfs-swig/libecryptfs_wrap.c	956;"	d	file:
SWIG_PY_POINTER	src/libecryptfs-swig/libecryptfs_wrap.c	955;"	d	file:
SWIG_PackData	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_PackData(char *c, void *ptr, size_t sz) {$/;"	f
SWIG_PackDataName	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {$/;"	f
SWIG_PackVoidPtr	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {$/;"	f
SWIG_PropagateClientData	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_PropagateClientData(void) {$/;"	f
SWIG_Py_None	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Py_None(void)$/;"	f
SWIG_Py_Void	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Py_Void(void)$/;"	f
SWIG_Python_AcquirePtr	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_AcquirePtr(PyObject *obj, int own) {$/;"	f
SWIG_Python_AddErrMesg	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_AddErrMesg(const char* mesg, int infront)$/;"	f
SWIG_Python_AddErrorMsg	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_AddErrorMsg(const char* mesg)$/;"	f
SWIG_Python_AppendOutput	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {$/;"	f
SWIG_Python_ArgFail	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_ArgFail(int argnum)$/;"	f
SWIG_Python_CallFunctor	src/libecryptfs-swig/libecryptfs_wrap.c	1145;"	d	file:
SWIG_Python_CallFunctor	src/libecryptfs-swig/libecryptfs_wrap.c	1147;"	d	file:
SWIG_Python_CheckImplicit	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_CheckImplicit(swig_type_info *ty)$/;"	f
SWIG_Python_ConvertFunctionPtr	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {$/;"	f
SWIG_Python_ConvertPacked	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {$/;"	f
SWIG_Python_ConvertPtr	src/libecryptfs-swig/libecryptfs_wrap.c	991;"	d	file:
SWIG_Python_ConvertPtrAndOwn	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {$/;"	f
SWIG_Python_DestroyModule	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_DestroyModule(void *vptr)$/;"	f
SWIG_Python_ErrorType	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_ErrorType(int code) {$/;"	f
SWIG_Python_ExceptionType	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_ExceptionType(swig_type_info *desc) {$/;"	f
SWIG_Python_FixMethods	src/libecryptfs-swig/libecryptfs_wrap.c	/^  SWIG_Python_FixMethods(PyMethodDef *methods,$/;"	f
SWIG_Python_GetModule	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_GetModule(void) {$/;"	f
SWIG_Python_GetSwigThis	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_GetSwigThis(PyObject *pyobj) $/;"	f
SWIG_Python_InitShadowInstance	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_InitShadowInstance(PyObject *args) {$/;"	f
SWIG_Python_InstallConstants	src/libecryptfs-swig/libecryptfs_wrap.c	/^  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {$/;"	f
SWIG_Python_MustGetPtr	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {$/;"	f
SWIG_Python_NewPackedObj	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {$/;"	f
SWIG_Python_NewPointerObj	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {$/;"	f
SWIG_Python_NewShadowInstance	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_NewShadowInstance(PySwigClientData *data, PyObject *swig_this)$/;"	f
SWIG_Python_Raise	src/libecryptfs-swig/libecryptfs_wrap.c	1048;"	d	file:
SWIG_Python_SetConstant	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   $/;"	f
SWIG_Python_SetErrorMsg	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {$/;"	f
SWIG_Python_SetErrorObj	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {$/;"	f
SWIG_Python_SetModule	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_SetModule(swig_module_info *swig_module) {$/;"	f
SWIG_Python_SetSwigThis	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)$/;"	f
SWIG_Python_TypeCache	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_TypeCache(void) {$/;"	f
SWIG_Python_TypeError	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_TypeError(const char *type, PyObject *obj)$/;"	f
SWIG_Python_TypeQuery	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_TypeQuery(const char *type)$/;"	f
SWIG_Python_UnpackTuple	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)$/;"	f
SWIG_Python_addvarlink	src/libecryptfs-swig/libecryptfs_wrap.c	/^  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {$/;"	f
SWIG_Python_newvarlink	src/libecryptfs-swig/libecryptfs_wrap.c	/^  SWIG_Python_newvarlink(void) {$/;"	f
SWIG_QUOTE_STRING	src/libecryptfs-swig/libecryptfs_wrap.c	139;"	d	file:
SWIG_RUNTIME_VERSION	src/libecryptfs-swig/libecryptfs_wrap.c	135;"	d	file:
SWIG_RuntimeError	src/libecryptfs-swig/libecryptfs_wrap.c	699;"	d	file:
SWIG_STATIC_POINTER	src/libecryptfs-swig/libecryptfs_wrap.c	1155;"	d	file:
SWIG_STATIC_POINTER	src/libecryptfs-swig/libecryptfs_wrap.c	1157;"	d	file:
SWIG_SetErrorMsg	src/libecryptfs-swig/libecryptfs_wrap.c	1023;"	d	file:
SWIG_SetErrorObj	src/libecryptfs-swig/libecryptfs_wrap.c	1022;"	d	file:
SWIG_SetModule	src/libecryptfs-swig/libecryptfs_wrap.c	1019;"	d	file:
SWIG_SyntaxError	src/libecryptfs-swig/libecryptfs_wrap.c	704;"	d	file:
SWIG_SystemError	src/libecryptfs-swig/libecryptfs_wrap.c	706;"	d	file:
SWIG_TMPOBJ	src/libecryptfs-swig/libecryptfs_wrap.c	271;"	d	file:
SWIG_TMPOBJMASK	src/libecryptfs-swig/libecryptfs_wrap.c	266;"	d	file:
SWIG_TYPE_TABLE_NAME	src/libecryptfs-swig/libecryptfs_wrap.c	141;"	d	file:
SWIG_TYPE_TABLE_NAME	src/libecryptfs-swig/libecryptfs_wrap.c	143;"	d	file:
SWIG_This	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_This(void)$/;"	f
SWIG_TypeCast	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {$/;"	f
SWIG_TypeCheck	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_TypeCheck(const char *c, swig_type_info *ty) {$/;"	f
SWIG_TypeCheckStruct	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {$/;"	f
SWIG_TypeCheck_Template	src/libecryptfs-swig/libecryptfs_wrap.c	402;"	d	file:
SWIG_TypeClientData	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {$/;"	f
SWIG_TypeCompare	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_TypeCompare(const char *nb, const char *tb) {$/;"	f
SWIG_TypeDynamicCast	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {$/;"	f
SWIG_TypeEquiv	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_TypeEquiv(const char *nb, const char *tb) {$/;"	f
SWIG_TypeError	src/libecryptfs-swig/libecryptfs_wrap.c	701;"	d	file:
SWIG_TypeName	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_TypeName(const swig_type_info *ty) {$/;"	f
SWIG_TypeNameComp	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_TypeNameComp(const char *f1, const char *l1,$/;"	f
SWIG_TypeNewClientData	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {$/;"	f
SWIG_TypePrettyName	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_TypePrettyName(const swig_type_info *type) {$/;"	f
SWIG_TypeQuery	src/libecryptfs-swig/libecryptfs_wrap.c	2486;"	d	file:
SWIG_TypeQueryModule	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_TypeQueryModule(swig_module_info *start, $/;"	f
SWIG_TypeRank	src/libecryptfs-swig/libecryptfs_wrap.c	284;"	d	file:
SWIG_UnknownError	src/libecryptfs-swig/libecryptfs_wrap.c	697;"	d	file:
SWIG_UnpackData	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_UnpackData(const char *c, void *ptr, size_t sz) {$/;"	f
SWIG_UnpackDataName	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {$/;"	f
SWIG_UnpackVoidPtr	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {$/;"	f
SWIG_VERSION	src/libecryptfs-swig/libecryptfs_wrap.c	2505;"	d	file:
SWIG_ValueError	src/libecryptfs-swig/libecryptfs_wrap.c	705;"	d	file:
SWIG_addvarlink	src/libecryptfs-swig/libecryptfs_wrap.c	2977;"	d	file:
SWIG_arg_fail	src/libecryptfs-swig/libecryptfs_wrap.c	2365;"	d	file:
SWIG_as_voidptr	src/libecryptfs-swig/libecryptfs_wrap.c	2508;"	d	file:
SWIG_as_voidptrptr	src/libecryptfs-swig/libecryptfs_wrap.c	2509;"	d	file:
SWIG_contract_assert	src/libecryptfs-swig/libecryptfs_wrap.c	2477;"	d	file:
SWIG_exception_fail	src/libecryptfs-swig/libecryptfs_wrap.c	2475;"	d	file:
SWIG_fail	src/libecryptfs-swig/libecryptfs_wrap.c	1026;"	d	file:
SWIG_globals	src/libecryptfs-swig/libecryptfs_wrap.c	/^  SWIG_globals(void) {$/;"	f
SWIG_init	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIGEXPORT void SWIG_init(void) {$/;"	f
SWIG_init	src/libecryptfs-swig/libecryptfs_wrap.c	2500;"	d	file:
SWIG_name	src/libecryptfs-swig/libecryptfs_wrap.c	2502;"	d	file:
SWIG_newvarlink	src/libecryptfs-swig/libecryptfs_wrap.c	2976;"	d	file:
SWIG_pchar_descriptor	src/libecryptfs-swig/libecryptfs_wrap.c	/^SWIG_pchar_descriptor(void)$/;"	f
SwigMethods	src/libecryptfs-swig/libecryptfs_wrap.c	/^static PyMethodDef SwigMethods[] = {$/;"	v	file:
TAR	src/pam_ecryptfs/Makefile	/^TAR = \/bin\/tar$/;"	m
TAR	src/utils/Makefile	/^TAR = \/bin\/tar$/;"	m
TMP	src/utils/mount.ecryptfs_private.c	57;"	d	file:
TMP	src/utils/mount.ecryptfs_private.c	59;"	d	file:
TSPI_CFLAGS	src/pam_ecryptfs/Makefile	/^TSPI_CFLAGS = $/;"	m
TSPI_CFLAGS	src/utils/Makefile	/^TSPI_CFLAGS = $/;"	m
TSPI_LIBS	src/pam_ecryptfs/Makefile	/^TSPI_LIBS = $/;"	m
TSPI_LIBS	src/utils/Makefile	/^TSPI_LIBS = $/;"	m
UMOUNT_PATH	src/utils/umount.ecryptfs.c	159;"	d	file:
USE_NLS	src/pam_ecryptfs/Makefile	/^USE_NLS = yes$/;"	m
USE_NLS	src/utils/Makefile	/^USE_NLS = yes$/;"	m
VAL_HEX	src/include/decision_graph.h	87;"	d
VAL_STR	src/include/decision_graph.h	86;"	d
VERIFY_VALUE	src/include/decision_graph.h	98;"	d
VERSION	config.h	119;"	d
VERSION	src/pam_ecryptfs/Makefile	/^VERSION = 83$/;"	m
VERSION	src/utils/Makefile	/^VERSION = 83$/;"	m
WRONG_VALUE	src/include/decision_graph.h	81;"	d
XGETTEXT	src/pam_ecryptfs/Makefile	/^XGETTEXT = \/usr\/bin\/xgettext$/;"	m
XGETTEXT	src/utils/Makefile	/^XGETTEXT = \/usr\/bin\/xgettext$/;"	m
_ALL_SOURCE	config.h	98;"	d
_CRT_SECURE_NO_DEPRECATE	src/libecryptfs-swig/libecryptfs_wrap.c	113;"	d	file:
_GNU_SOURCE	config.h	102;"	d
_GNU_SOURCE	src/utils/mount.ecryptfs_private.c	27;"	d	file:
_POSIX_PTHREAD_SEMANTICS	config.h	106;"	d
_PySwigObject_type	src/libecryptfs-swig/libecryptfs_wrap.c	/^_PySwigObject_type(void) {$/;"	f
_PySwigPacked_type	src/libecryptfs-swig/libecryptfs_wrap.c	/^_PySwigPacked_type(void) {$/;"	f
_SCL_SECURE_NO_DEPRECATE	src/libecryptfs-swig/libecryptfs_wrap.c	118;"	d	file:
_SWIG_Py_None	src/libecryptfs-swig/libecryptfs_wrap.c	/^_SWIG_Py_None(void)$/;"	f
_SWIG_This	src/libecryptfs-swig/libecryptfs_wrap.c	/^_SWIG_This(void)$/;"	f
_TANDEM_SOURCE	config.h	110;"	d
__EXTENSIONS__	config.h	114;"	d
__pkcs11_openssl_d2i_t	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^typedef const unsigned char *__pkcs11_openssl_d2i_t;$/;"	t	file:
__pkcs11_openssl_d2i_t	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^typedef unsigned char *__pkcs11_openssl_d2i_t;$/;"	t	file:
_swigc__p_char	src/libecryptfs-swig/libecryptfs_wrap.c	/^static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};$/;"	v	file:
_swigt__p_char	src/libecryptfs-swig/libecryptfs_wrap.c	/^static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};$/;"	v	file:
abs_builddir	src/pam_ecryptfs/Makefile	/^abs_builddir = \/home\/mbhyun\/src\/ecryptfs-utils-83\/src\/pam_ecryptfs$/;"	m
abs_builddir	src/utils/Makefile	/^abs_builddir = \/home\/mbhyun\/src\/ecryptfs-utils-83\/src\/utils$/;"	m
abs_srcdir	src/pam_ecryptfs/Makefile	/^abs_srcdir = \/home\/mbhyun\/src\/ecryptfs-utils-83\/src\/pam_ecryptfs$/;"	m
abs_srcdir	src/utils/Makefile	/^abs_srcdir = \/home\/mbhyun\/src\/ecryptfs-utils-83\/src\/utils$/;"	m
abs_top_builddir	src/pam_ecryptfs/Makefile	/^abs_top_builddir = \/home\/mbhyun\/src\/ecryptfs-utils-83$/;"	m
abs_top_builddir	src/utils/Makefile	/^abs_top_builddir = \/home\/mbhyun\/src\/ecryptfs-utils-83$/;"	m
abs_top_srcdir	src/pam_ecryptfs/Makefile	/^abs_top_srcdir = \/home\/mbhyun\/src\/ecryptfs-utils-83$/;"	m
abs_top_srcdir	src/utils/Makefile	/^abs_top_srcdir = \/home\/mbhyun\/src\/ecryptfs-utils-83$/;"	m
ac_ct_CC	src/pam_ecryptfs/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	src/utils/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_DUMPBIN	src/pam_ecryptfs/Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_DUMPBIN	src/utils/Makefile	/^ac_ct_DUMPBIN = $/;"	m
add_cipher	src/libecryptfs/cipher_list.c	/^static int add_cipher(char *name, struct ecryptfs_cipher_elem **current,$/;"	f	file:
add_sid_pid_pair_to_shm	src/libecryptfs/main.c	/^static int add_sid_pid_pair_to_shm(int shm_id)$/;"	f	file:
add_transition_node_to_param_node	src/libecryptfs/decision_graph.c	/^int add_transition_node_to_param_node(struct param_node *param_node,$/;"	f
alias	src/include/ecryptfs.h	/^	char *alias;$/;"	m	struct:ecryptfs_key_mod
alloc_and_get_val	src/libecryptfs/decision_graph.c	/^static int alloc_and_get_val(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
allow_protected_authentication	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^	int allow_protected_authentication;$/;"	m	struct:pkcs11h_subgraph_provider_ctx	file:
am__DEPENDENCIES_1	src/pam_ecryptfs/Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DEPENDENCIES_1	src/utils/Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__aclocal_m4_deps	src/pam_ecryptfs/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/ac_pkg_swig.m4 \\$/;"	m
am__aclocal_m4_deps	src/utils/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/ac_pkg_swig.m4 \\$/;"	m
am__base_list	src/pam_ecryptfs/Makefile	/^am__base_list = \\$/;"	m
am__base_list	src/utils/Makefile	/^am__base_list = \\$/;"	m
am__cd	src/pam_ecryptfs/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	src/utils/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	src/pam_ecryptfs/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	src/utils/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__depfiles_maybe	src/pam_ecryptfs/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	src/utils/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__include	src/pam_ecryptfs/Makefile	/^am__include = include$/;"	m
am__include	src/utils/Makefile	/^am__include = include$/;"	m
am__install_max	src/pam_ecryptfs/Makefile	/^am__install_max = 40$/;"	m
am__install_max	src/utils/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	src/pam_ecryptfs/Makefile	/^am__installdirs = "$(DESTDIR)$(pamdir)"$/;"	m
am__installdirs	src/utils/Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(rootsbindir)" \\$/;"	m
am__leading_dot	src/pam_ecryptfs/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	src/utils/Makefile	/^am__leading_dot = .$/;"	m
am__mv	src/pam_ecryptfs/Makefile	/^am__mv = mv -f$/;"	m
am__mv	src/utils/Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	src/pam_ecryptfs/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	src/utils/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	src/pam_ecryptfs/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	src/utils/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	src/pam_ecryptfs/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	src/utils/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__quote	src/pam_ecryptfs/Makefile	/^am__quote = $/;"	m
am__quote	src/utils/Makefile	/^am__quote = $/;"	m
am__strip_dir	src/pam_ecryptfs/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	src/utils/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tar	src/pam_ecryptfs/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tar	src/utils/Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__tty_colors	src/utils/Makefile	/^am__tty_colors = \\$/;"	m
am__untar	src/pam_ecryptfs/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__untar	src/utils/Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am__vpath_adj	src/pam_ecryptfs/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	src/utils/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	src/pam_ecryptfs/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	src/utils/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_ecryptfs_add_passphrase_OBJECTS	src/utils/Makefile	/^am_ecryptfs_add_passphrase_OBJECTS =  \\$/;"	m
am_ecryptfs_generate_tpm_key_OBJECTS	src/utils/Makefile	/^am_ecryptfs_generate_tpm_key_OBJECTS =  \\$/;"	m
am_ecryptfs_insert_wrapped_passphrase_into_keyring_OBJECTS	src/utils/Makefile	/^am_ecryptfs_insert_wrapped_passphrase_into_keyring_OBJECTS =  \\$/;"	m
am_ecryptfs_manager_OBJECTS	src/utils/Makefile	/^am_ecryptfs_manager_OBJECTS = ecryptfs_manager-manager.$(OBJEXT) \\$/;"	m
am_ecryptfs_rewrap_passphrase_OBJECTS	src/utils/Makefile	/^am_ecryptfs_rewrap_passphrase_OBJECTS =  \\$/;"	m
am_ecryptfs_stat_OBJECTS	src/utils/Makefile	/^am_ecryptfs_stat_OBJECTS = ecryptfs-stat.$(OBJEXT)$/;"	m
am_ecryptfs_unwrap_passphrase_OBJECTS	src/utils/Makefile	/^am_ecryptfs_unwrap_passphrase_OBJECTS =  \\$/;"	m
am_ecryptfs_wrap_passphrase_OBJECTS	src/utils/Makefile	/^am_ecryptfs_wrap_passphrase_OBJECTS =  \\$/;"	m
am_mount_ecryptfs_OBJECTS	src/utils/Makefile	/^am_mount_ecryptfs_OBJECTS = mount_ecryptfs-mount.ecryptfs.$(OBJEXT) \\$/;"	m
am_mount_ecryptfs_private_OBJECTS	src/utils/Makefile	/^am_mount_ecryptfs_private_OBJECTS = mount.ecryptfs_private.$(OBJEXT)$/;"	m
am_pam_ecryptfs_la_OBJECTS	src/pam_ecryptfs/Makefile	/^am_pam_ecryptfs_la_OBJECTS = pam_ecryptfs_la-pam_ecryptfs.lo$/;"	m
am_test_OBJECTS	src/utils/Makefile	/^am_test_OBJECTS = test.$(OBJEXT) io.$(OBJEXT)$/;"	m
am_umount_ecryptfs_OBJECTS	src/utils/Makefile	/^am_umount_ecryptfs_OBJECTS =  \\$/;"	m
another_key_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node another_key_param_node = {$/;"	v	typeref:struct:param_node	file:
another_key_param_node_callback	src/libecryptfs/module_mgr.c	/^another_key_param_node_callback(struct ecryptfs_ctx *ctx,$/;"	f	file:
another_key_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node another_key_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
auth_tok	src/include/ecryptfs.h	/^	struct ecryptfs_auth_tok *auth_tok;$/;"	m	struct:ecryptfs_auth_tok_list	typeref:struct:ecryptfs_auth_tok_list::ecryptfs_auth_tok
bin2dir	src/utils/Makefile	/^bin2dir = $(bindir)$/;"	m
bin_PROGRAMS	src/utils/Makefile	/^bin_PROGRAMS = ecryptfs-manager$(EXEEXT) \\$/;"	m
bin_SCRIPTS	src/utils/Makefile	/^bin_SCRIPTS = ecryptfs-setup-private \\$/;"	m
binary_data	src/include/ecryptfs.h	/^typedef struct binary_data {$/;"	s
binary_data	src/include/ecryptfs.h	/^} binary_data;$/;"	t	typeref:struct:binary_data
bindir	src/pam_ecryptfs/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	src/utils/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
blob	src/include/ecryptfs.h	/^	char *blob;$/;"	m	struct:ecryptfs_key_mod
blob_size	src/include/ecryptfs.h	/^	size_t blob_size;$/;"	m	struct:ecryptfs_key_mod
blocksize	src/include/ecryptfs.h	/^	uint32_t blocksize;$/;"	m	struct:cipher_descriptor
blocksize	src/libecryptfs/cipher_list.c	/^	uint32_t blocksize;$/;"	m	struct:cipher_name_module_map	file:
build	src/pam_ecryptfs/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build	src/utils/Makefile	/^build = i686-pc-linux-gnu$/;"	m
build_alias	src/pam_ecryptfs/Makefile	/^build_alias = $/;"	m
build_alias	src/utils/Makefile	/^build_alias = $/;"	m
build_cpu	src/pam_ecryptfs/Makefile	/^build_cpu = i686$/;"	m
build_cpu	src/utils/Makefile	/^build_cpu = i686$/;"	m
build_os	src/pam_ecryptfs/Makefile	/^build_os = linux-gnu$/;"	m
build_os	src/utils/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	src/pam_ecryptfs/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_triplet	src/utils/Makefile	/^build_triplet = i686-pc-linux-gnu$/;"	m
build_vendor	src/pam_ecryptfs/Makefile	/^build_vendor = pc$/;"	m
build_vendor	src/utils/Makefile	/^build_vendor = pc$/;"	m
builddir	src/pam_ecryptfs/Makefile	/^builddir = .$/;"	m
builddir	src/utils/Makefile	/^builddir = .$/;"	m
builtin_get_key_mod_ops	src/libecryptfs/key_mod.c	/^(*builtin_get_key_mod_ops[])(void) = {$/;"	v	typeref:struct:builtin_get_key_mod_ops	file:
bump_counter	src/utils/mount.ecryptfs_private.c	/^int bump_counter(FILE *fh, int delta) {$/;"	f
byte_offset	src/utils/test.c	/^	int byte_offset;$/;"	m	struct:translation_test_vector_element	file:
bytes	src/include/ecryptfs.h	/^	uint32_t bytes;$/;"	m	struct:ecryptfs_cipher_elem
cast	src/libecryptfs-swig/libecryptfs_wrap.c	/^  struct swig_cast_info  *cast;			\/* linked list of types that can cast into this type *\/$/;"	m	struct:swig_type_info	typeref:struct:swig_type_info::swig_cast_info	file:
cast_initial	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_cast_info         **cast_initial;	\/* Array of initially generated casting structures *\/$/;"	m	struct:swig_module_info	file:
certificate_blob	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^	unsigned char *certificate_blob;$/;"	m	struct:pkcs11h_data	file:
certificate_blob_size	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^	size_t certificate_blob_size;$/;"	m	struct:pkcs11h_data	file:
certificate_is_private	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^	int certificate_is_private;$/;"	m	struct:pkcs11h_subgraph_provider_ctx	file:
check_ownerships	src/utils/mount.ecryptfs_private.c	/^int check_ownerships(int uid, char *path) {$/;"	f
check_username	src/utils/mount.ecryptfs_private.c	/^int check_username(char *u) {$/;"	f
children	src/include/ecryptfs.h	/^	struct ecryptfs_name_val_pair *children[NV_MAX_CHILDREN];$/;"	m	struct:ecryptfs_name_val_pair	typeref:struct:ecryptfs_name_val_pair::ecryptfs_name_val_pair
cipher_descriptor	src/include/ecryptfs.h	/^struct cipher_descriptor {$/;"	s
cipher_name	src/libecryptfs/module_mgr.c	/^	char *cipher_name;$/;"	m	struct:supported_key_bytes	file:
cipher_name_module_map	src/libecryptfs/cipher_list.c	/^static struct cipher_name_module_map {$/;"	s	file:
cipher_name_module_map	src/libecryptfs/cipher_list.c	/^} cipher_name_module_map[] = {$/;"	v	typeref:struct:cipher_name_module_map	file:
cipher_str_name_map	src/libecryptfs/cipher_list.c	/^static struct cipher_str_name_map_elem cipher_str_name_map[] = {$/;"	v	typeref:struct:cipher_str_name_map_elem	file:
cipher_str_name_map_elem	src/include/ecryptfs.h	/^struct cipher_str_name_map_elem {$/;"	s
clientdata	src/libecryptfs-swig/libecryptfs_wrap.c	/^  void                    *clientdata;		\/* Language specific module data *\/$/;"	m	struct:swig_module_info	file:
clientdata	src/libecryptfs-swig/libecryptfs_wrap.c	/^  void                   *clientdata;		\/* language specific type data *\/$/;"	m	struct:swig_type_info	file:
common_salt	src/include/ecryptfs.h	/^static const char common_salt[ECRYPTFS_SALT_SIZE] =$/;"	v
construct_umount_args	src/utils/umount.ecryptfs.c	/^static int construct_umount_args(int argc, char **argv, char ***new_argv)$/;"	f	file:
converter	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_converter_func     converter;		\/* function to cast the void pointers *\/$/;"	m	struct:swig_cast_info	file:
copy_nv_pair	src/libecryptfs/cmd_ln_parser.c	/^static int copy_nv_pair(struct ecryptfs_name_val_pair *dst,$/;"	f	file:
create_default_dir	src/utils/gen_key.c	/^int create_default_dir(char *home, struct ecryptfs_key_mod *key_mod)$/;"	f
create_subdirectory	src/utils/gen_key.c	/^create_subdirectory(char *file, char *home, struct ecryptfs_key_mod *key_mod)$/;"	f
cryptfs_get_ctx_opts	src/libecryptfs/main.c	/^struct ecryptfs_ctx_ops *cryptfs_get_ctx_opts (void)$/;"	f
crypto_api_name	src/include/ecryptfs.h	/^	char *crypto_api_name;$/;"	m	struct:cipher_descriptor
ctx	src/include/ecryptfs.h	/^	} ctx;$/;"	m	struct:ecryptfs_messaging_ctx	typeref:union:ecryptfs_messaging_ctx::__anon5
ctx	src/key_mod/ecryptfs_key_mod_gpg.c	/^	gpgme_ctx_t ctx;$/;"	m	struct:key_mod_gpg	file:
ctx_mutex	src/include/ecryptfs.h	/^	void *ctx_mutex;$/;"	m	struct:ecryptfs_ctx
ctx_ops	src/libecryptfs/main.c	/^static struct ecryptfs_ctx_ops ctx_ops;$/;"	v	typeref:struct:ecryptfs_ctx_ops	file:
daemonize	src/daemon/main.c	/^void daemonize(void)$/;"	f
data	src/include/ecryptfs.h	/^	uint8_t data[];$/;"	m	struct:ecryptfs_message
data	src/include/ecryptfs.h	/^	uint8_t data[];$/;"	m	struct:ecryptfs_private_key
data	src/include/ecryptfs.h	/^	unsigned char *data;$/;"	m	struct:binary_data
data_len	src/include/ecryptfs.h	/^	uint32_t data_len;$/;"	m	struct:ecryptfs_message
data_len	src/include/ecryptfs.h	/^	uint32_t data_len;$/;"	m	struct:ecryptfs_private_key
datadir	src/pam_ecryptfs/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	src/utils/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	src/pam_ecryptfs/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	src/utils/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
dcast	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_dycast_func        dcast;		\/* dynamic cast function down a hierarchy *\/$/;"	m	struct:swig_type_info	file:
decrement	src/utils/mount.ecryptfs_private.c	/^int decrement(FILE *fh) {$/;"	f
decrypt	src/include/ecryptfs.h	/^	int (*decrypt)(char *to, size_t *to_size, char *from, size_t from_size,$/;"	m	struct:ecryptfs_key_mod_ops
decrypt_lock	src/key_mod/ecryptfs_key_mod_tspi.c	/^static pthread_mutex_t decrypt_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
decrypted_key	src/include/ecryptfs.h	/^	uint8_t decrypted_key[ECRYPTFS_MAX_KEY_BYTES];$/;"	m	struct:ecryptfs_session_key
decrypted_key_size	src/include/ecryptfs.h	/^	int32_t decrypted_key_size;$/;"	m	struct:ecryptfs_session_key
decryption_only_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node decryption_only_param_node = {$/;"	v	typeref:struct:param_node	file:
decryption_only_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node decryption_only_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
default_val	src/include/decision_graph.h	/^        char *default_val;$/;"	m	struct:param_node
default_val	src/include/ecryptfs.h	/^	char *default_val;$/;"	m	struct:key_mod_param
delargs	src/libecryptfs-swig/libecryptfs_wrap.c	/^  int delargs;$/;"	m	struct:__anon1	file:
depcomp	src/pam_ecryptfs/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	src/utils/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
description	src/include/ecryptfs.h	/^	char *description;$/;"	m	struct:key_mod_param
descriptive_name	src/include/ecryptfs.h	/^	char *descriptive_name;$/;"	m	struct:cipher_descriptor
deserialize_key_module_data	src/key_mod/ecryptfs_key_mod_gpg.c	/^static int deserialize_key_module_data(struct key_mod_gpg *key_mod_data,$/;"	f	file:
destroy	src/include/ecryptfs.h	/^	int (*destroy)(unsigned char *blob);$/;"	m	struct:ecryptfs_key_mod_ops
destroy	src/libecryptfs-swig/libecryptfs_wrap.c	/^  PyObject *destroy;$/;"	m	struct:__anon1	file:
destroy_key_mod_gpg	src/key_mod/ecryptfs_key_mod_gpg.c	/^void destroy_key_mod_gpg(struct key_mod_gpg *key_mod_gpg)$/;"	f
destruct_pki	src/key_mod/ecryptfs_key_mod_gpg.c	/^int destruct_pki(void)$/;"	f
disable_echo	src/utils/io.c	/^static int disable_echo(struct termios *saved_settings)$/;"	f	file:
display_opts	src/include/decision_graph.h	/^        void (*display_opts)(struct param_node *);$/;"	m	struct:param_node
do_hash	src/libecryptfs/main.c	/^int do_hash(char *src, int src_size, char *dst, int algo)$/;"	f
do_transition	src/libecryptfs/decision_graph.c	/^int do_transition(struct ecryptfs_ctx *ctx, struct param_node **next,$/;"	f
docdir	src/pam_ecryptfs/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	src/utils/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
driver_name	src/include/ecryptfs.h	/^	char *driver_name;$/;"	m	struct:cipher_descriptor
dummy_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node dummy_param_node = {$/;"	v	typeref:struct:param_node	file:
dummy_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node dummy_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
dump_args	src/utils/mount.ecryptfs.c	/^static int dump_args = 0;$/;"	v	file:
dvalue	src/libecryptfs-swig/libecryptfs_wrap.c	/^  double dvalue;$/;"	m	struct:swig_const_info	file:
dvidir	src/pam_ecryptfs/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	src/utils/Makefile	/^dvidir = ${docdir}$/;"	m
ecryptfs_add_auth_tok_to_keyring	src/libecryptfs/key_management.c	/^int ecryptfs_add_auth_tok_to_keyring(struct ecryptfs_auth_tok *auth_tok,$/;"	f
ecryptfs_add_blob_to_keyring	src/libecryptfs/key_management.c	/^int ecryptfs_add_blob_to_keyring(char *blob, char *sig)$/;"	f
ecryptfs_add_crypto_modules	src/libecryptfs/cipher_list.c	/^int ecryptfs_add_crypto_modules(struct ecryptfs_cipher_elem *cipher_list_head)$/;"	f
ecryptfs_add_key_module_key_to_keyring	src/libecryptfs/key_management.c	/^ecryptfs_add_key_module_key_to_keyring(char *auth_tok_sig,$/;"	f
ecryptfs_add_passphrase_DEPENDENCIES	src/utils/Makefile	/^ecryptfs_add_passphrase_DEPENDENCIES =  \\$/;"	m
ecryptfs_add_passphrase_LDADD	src/utils/Makefile	/^ecryptfs_add_passphrase_LDADD = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la$/;"	m
ecryptfs_add_passphrase_OBJECTS	src/utils/Makefile	/^ecryptfs_add_passphrase_OBJECTS =  \\$/;"	m
ecryptfs_add_passphrase_SOURCES	src/utils/Makefile	/^ecryptfs_add_passphrase_SOURCES = ecryptfs_add_passphrase.c$/;"	m
ecryptfs_add_passphrase_key_to_keyring	src/libecryptfs/key_management.c	/^int ecryptfs_add_passphrase_key_to_keyring(char *auth_tok_sig, char *passphrase,$/;"	f
ecryptfs_append_sig	src/libecryptfs/key_management.c	/^int ecryptfs_append_sig(char *auth_tok_sig, char *sig_cache_filename)$/;"	f
ecryptfs_auth_tok	src/include/ecryptfs.h	/^struct ecryptfs_auth_tok {$/;"	s
ecryptfs_auth_tok_list	src/include/ecryptfs.h	/^struct ecryptfs_auth_tok_list {$/;"	s
ecryptfs_build_linear_subgraph	src/libecryptfs/decision_graph.c	/^int ecryptfs_build_linear_subgraph(struct transition_node **trans_node,$/;"	f
ecryptfs_check_sig	src/libecryptfs/key_management.c	/^int ecryptfs_check_sig(char *auth_tok_sig, char *sig_cache_filename,$/;"	f
ecryptfs_cipher_elem	src/include/ecryptfs.h	/^struct ecryptfs_cipher_elem {$/;"	s
ecryptfs_cipher_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node ecryptfs_cipher_param_node = {$/;"	v	typeref:struct:param_node	file:
ecryptfs_cipher_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node ecryptfs_cipher_param_node;$/;"	v	typeref:struct:param_node	file:
ecryptfs_cipher_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node ecryptfs_cipher_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
ecryptfs_clear_keyring	src/libecryptfs/key_management.c	/^int ecryptfs_clear_keyring(void)$/;"	f
ecryptfs_commit_lower_page	src/utils/test.c	/^ecryptfs_commit_lower_page(struct page *lower_page, struct inode *lower_inode,$/;"	f
ecryptfs_contains_ecryptfs_marker	src/libecryptfs/ecryptfs-stat.c	/^static int ecryptfs_contains_ecryptfs_marker(char *data)$/;"	f	file:
ecryptfs_crypt_stat	src/utils/test.c	/^struct ecryptfs_crypt_stat {$/;"	s	file:
ecryptfs_crypt_stat_user	src/include/ecryptfs.h	/^struct ecryptfs_crypt_stat_user {$/;"	s
ecryptfs_ctx	src/include/ecryptfs.h	/^struct ecryptfs_ctx {$/;"	s
ecryptfs_ctx_ops	src/include/ecryptfs.h	/^struct ecryptfs_ctx_ops {$/;"	s
ecryptfs_daemon_info	src/include/ecryptfs.h	/^struct ecryptfs_daemon_info {$/;"	s
ecryptfs_default_cipher	src/libecryptfs/cipher_list.c	/^int ecryptfs_default_cipher(struct ecryptfs_cipher_elem **default_cipher,$/;"	f
ecryptfs_delete_nvp	src/libecryptfs/decision_graph.c	/^int ecryptfs_delete_nvp(struct ecryptfs_name_val_pair *nvp_head,$/;"	f
ecryptfs_derive_iv	src/utils/test.c	/^int ecryptfs_derive_iv(char *iv, struct ecryptfs_crypt_stat *crypt_stat,$/;"	f
ecryptfs_destroy_nvp	src/libecryptfs/decision_graph.c	/^void ecryptfs_destroy_nvp(struct ecryptfs_name_val_pair *nvp)$/;"	f
ecryptfs_disable_echo	src/libecryptfs/key_management.c	/^int ecryptfs_disable_echo(struct termios *saved_settings)$/;"	f
ecryptfs_do_mount	src/utils/mount.ecryptfs.c	/^static int ecryptfs_do_mount(int argc, char **argv, struct val_node *mnt_params,$/;"	f	file:
ecryptfs_dummy_decrypt	src/libecryptfs/key_mod.c	/^ecryptfs_dummy_decrypt(char *to, size_t *to_size, char *from, size_t from_size,$/;"	f	file:
ecryptfs_dummy_destroy	src/libecryptfs/key_mod.c	/^static int ecryptfs_dummy_destroy(unsigned char *blob)$/;"	f	file:
ecryptfs_dummy_encrypt	src/libecryptfs/key_mod.c	/^ecryptfs_dummy_encrypt(char *to, size_t *to_size, char *from, size_t from_size,$/;"	f	file:
ecryptfs_dummy_finalize	src/libecryptfs/key_mod.c	/^static int ecryptfs_dummy_finalize(void)$/;"	f	file:
ecryptfs_dummy_get_blob	src/libecryptfs/key_mod.c	/^static int ecryptfs_dummy_get_blob(unsigned char *blob, size_t *blob_size,$/;"	f	file:
ecryptfs_dummy_get_gen_key_params	src/libecryptfs/key_mod.c	/^static int ecryptfs_dummy_get_gen_key_params(struct key_mod_param **params,$/;"	f	file:
ecryptfs_dummy_get_gen_key_subgraph_trans_node	src/libecryptfs/key_mod.c	/^ecryptfs_dummy_get_gen_key_subgraph_trans_node(struct transition_node **trans,$/;"	f	file:
ecryptfs_dummy_get_key_data	src/libecryptfs/key_mod.c	/^ecryptfs_dummy_get_key_data(unsigned char *key_data, size_t *key_data_len,$/;"	f	file:
ecryptfs_dummy_get_key_hint	src/libecryptfs/key_mod.c	/^static int ecryptfs_dummy_get_key_hint(unsigned char *hint, size_t *hint_len,$/;"	f	file:
ecryptfs_dummy_get_key_sig	src/libecryptfs/key_mod.c	/^ecryptfs_dummy_get_key_sig(unsigned char *sig, unsigned char *blob)$/;"	f	file:
ecryptfs_dummy_get_param_subgraph_trans_node	src/libecryptfs/key_mod.c	/^ecryptfs_dummy_get_param_subgraph_trans_node(struct transition_node **trans,$/;"	f	file:
ecryptfs_dummy_get_params	src/libecryptfs/key_mod.c	/^ecryptfs_dummy_get_params(struct key_mod_param **params, uint32_t *num_params)$/;"	f	file:
ecryptfs_dummy_init	src/libecryptfs/key_mod.c	/^static int ecryptfs_dummy_init(char **alias)$/;"	f	file:
ecryptfs_dump_decision_graph	src/libecryptfs/decision_graph.c	/^void ecryptfs_dump_decision_graph(FILE *file_stream,$/;"	f
ecryptfs_dump_param_node	src/libecryptfs/decision_graph.c	/^void ecryptfs_dump_param_node(FILE *file_stream,$/;"	f
ecryptfs_dump_transition_node	src/libecryptfs/decision_graph.c	/^void ecryptfs_dump_transition_node(FILE *file_stream,$/;"	f
ecryptfs_enable_echo	src/libecryptfs/key_management.c	/^int ecryptfs_enable_echo(struct termios *saved_settings)$/;"	f
ecryptfs_encrypt_page	src/utils/test.c	/^int ecryptfs_encrypt_page(int page_cache_size, int extent_size,$/;"	f
ecryptfs_encrypt_page_offset	src/utils/test.c	/^ecryptfs_encrypt_page_offset(struct ecryptfs_crypt_stat *crypt_stat,$/;"	f
ecryptfs_enter_linear_subgraph_tf	src/libecryptfs/decision_graph.c	/^ecryptfs_enter_linear_subgraph_tf(struct ecryptfs_ctx *ctx,$/;"	f	file:
ecryptfs_eval_decision_graph	src/libecryptfs/decision_graph.c	/^int ecryptfs_eval_decision_graph(struct ecryptfs_ctx *ctx,$/;"	f
ecryptfs_exit_linear_subgraph_tf	src/libecryptfs/decision_graph.c	/^ecryptfs_exit_linear_subgraph_tf(struct ecryptfs_ctx *ctx,$/;"	f	file:
ecryptfs_extent_to_lwr_pg_idx_and_offset	src/utils/test.c	/^ecryptfs_extent_to_lwr_pg_idx_and_offset(unsigned long *lower_page_idx,$/;"	f
ecryptfs_fetch_private_mnt	src/libecryptfs/main.c	/^char *ecryptfs_fetch_private_mnt(char *pw_dir) {$/;"	f
ecryptfs_fill_in_dummy_ops	src/libecryptfs/key_mod.c	/^int ecryptfs_fill_in_dummy_ops(struct ecryptfs_key_mod_ops *key_mod_ops)$/;"	f
ecryptfs_find_key_mod	src/libecryptfs/key_mod.c	/^int ecryptfs_find_key_mod(struct ecryptfs_key_mod **key_mod,$/;"	f
ecryptfs_flag_map	src/libecryptfs/ecryptfs-stat.c	/^static struct ecryptfs_flag_map_elem ecryptfs_flag_map[] = {$/;"	v	typeref:struct:ecryptfs_flag_map_elem	file:
ecryptfs_flag_map_elem	src/libecryptfs/ecryptfs-stat.c	/^struct ecryptfs_flag_map_elem {$/;"	s	file:
ecryptfs_free_cipher_list	src/libecryptfs/cipher_list.c	/^int ecryptfs_free_cipher_list(struct ecryptfs_cipher_elem cipher_list_head)$/;"	f
ecryptfs_free_key_mod_list	src/libecryptfs/key_mod.c	/^int ecryptfs_free_key_mod_list(struct ecryptfs_ctx *ctx)$/;"	f
ecryptfs_generate_key	src/utils/gen_key.c	/^int ecryptfs_generate_key(void)$/;"	f
ecryptfs_generate_key_payload	src/libecryptfs/main.c	/^ecryptfs_generate_key_payload(struct ecryptfs_auth_tok *auth_tok,$/;"	f
ecryptfs_generate_mount_flags	src/utils/mount.ecryptfs.c	/^static int ecryptfs_generate_mount_flags(char *options, int *flags)$/;"	f	file:
ecryptfs_generate_passphrase_auth_tok	src/libecryptfs/key_management.c	/^int ecryptfs_generate_passphrase_auth_tok(struct ecryptfs_auth_tok **auth_tok,$/;"	f
ecryptfs_generate_sig_from_key_data	src/libecryptfs/key_mod.c	/^int ecryptfs_generate_sig_from_key_data(unsigned char *sig,$/;"	f
ecryptfs_generate_tpm_key_CFLAGS	src/utils/Makefile	/^ecryptfs_generate_tpm_key_CFLAGS = $(AM_CFLAGS) $(TSPI_CFLAGS)$/;"	m
ecryptfs_generate_tpm_key_DEPENDENCIES	src/utils/Makefile	/^ecryptfs_generate_tpm_key_DEPENDENCIES = $(am__DEPENDENCIES_1)$/;"	m
ecryptfs_generate_tpm_key_LDADD	src/utils/Makefile	/^ecryptfs_generate_tpm_key_LDADD = $(TSPI_LIBS)$/;"	m
ecryptfs_generate_tpm_key_LINK	src/utils/Makefile	/^ecryptfs_generate_tpm_key_LINK = $(LIBTOOL) --tag=CC \\$/;"	m
ecryptfs_generate_tpm_key_OBJECTS	src/utils/Makefile	/^ecryptfs_generate_tpm_key_OBJECTS =  \\$/;"	m
ecryptfs_generate_tpm_key_SOURCES	src/utils/Makefile	/^ecryptfs_generate_tpm_key_SOURCES = ecryptfs_generate_tpm_key.c$/;"	m
ecryptfs_get_current_kernel_ciphers	src/libecryptfs/cipher_list.c	/^int ecryptfs_get_current_kernel_ciphers($/;"	f
ecryptfs_get_kernel_ciphers	src/libecryptfs/cipher_list.c	/^int ecryptfs_get_kernel_ciphers(struct cipher_descriptor *cd_head)$/;"	f
ecryptfs_get_loaded_ciphers	src/libecryptfs/cipher_list.c	/^int ecryptfs_get_loaded_ciphers(struct ecryptfs_cipher_elem *cipher_list_head)$/;"	f
ecryptfs_get_lower_page	src/utils/test.c	/^int ecryptfs_get_lower_page(struct page **lower_page, struct inode *lower_inode,$/;"	f
ecryptfs_get_module_ciphers	src/libecryptfs/cipher_list.c	/^int ecryptfs_get_module_ciphers(struct cipher_descriptor *cd_head)$/;"	f
ecryptfs_get_passphrase	src/libecryptfs/key_management.c	/^char *ecryptfs_get_passphrase(char *prompt) {$/;"	f
ecryptfs_get_proc_mount_point	src/libecryptfs/cipher_list.c	/^int ecryptfs_get_proc_mount_point(char **proc_mount_point)$/;"	f
ecryptfs_get_version	src/libecryptfs/sysfs.c	/^int ecryptfs_get_version(uint32_t *version)$/;"	f
ecryptfs_get_versions	src/libecryptfs/main.c	/^void ecryptfs_get_versions(int *major, int *minor, int *file_version)$/;"	f
ecryptfs_get_wrapped_passphrase_filename	src/libecryptfs/key_management.c	/^char *ecryptfs_get_wrapped_passphrase_filename() {$/;"	f
ecryptfs_gpg_decrypt	src/key_mod/ecryptfs_key_mod_gpg.c	/^int ecryptfs_gpg_decrypt(char *to, size_t *decrypted_key_size, char *from, $/;"	f
ecryptfs_gpg_encrypt	src/key_mod/ecryptfs_key_mod_gpg.c	/^int ecryptfs_gpg_encrypt(char *to, int size, char *from, unsigned char *blob)$/;"	f
ecryptfs_gpg_finalize	src/key_mod/ecryptfs_key_mod_gpg.c	/^int ecryptfs_gpg_finalize(void)$/;"	f
ecryptfs_gpg_generate_key	src/key_mod/ecryptfs_key_mod_gpg.c	/^int ecryptfs_gpg_generate_key(char *filename)$/;"	f
ecryptfs_gpg_get_key_metadata	src/key_mod/ecryptfs_key_mod_gpg.c	/^ecryptfs_gpg_get_key_metadata(char *sig, int *length, unsigned char *blob)$/;"	f	file:
ecryptfs_gpg_get_param_subgraph_trans_node	src/key_mod/ecryptfs_key_mod_gpg.c	/^ecryptfs_gpg_get_param_subgraph_trans_node(struct transition_node **trans,$/;"	f	file:
ecryptfs_gpg_init	src/key_mod/ecryptfs_key_mod_gpg.c	/^static int ecryptfs_gpg_init(char **alias)$/;"	f	file:
ecryptfs_gpg_initialize_key_module_state	src/key_mod/ecryptfs_key_mod_gpg.c	/^ecryptfs_gpg_initialize_key_module_state(unsigned char *blob,$/;"	f	file:
ecryptfs_gpg_ops	src/key_mod/ecryptfs_key_mod_gpg.c	/^static struct ecryptfs_key_mod_ops ecryptfs_gpg_ops = {$/;"	v	typeref:struct:ecryptfs_key_mod_ops	file:
ecryptfs_init_messaging	src/libecryptfs/messaging.c	/^int ecryptfs_init_messaging(struct ecryptfs_messaging_ctx *mctx, uint32_t type)$/;"	f
ecryptfs_init_miscdev	src/libecryptfs/miscdev.c	/^int ecryptfs_init_miscdev(struct ecryptfs_miscdev_ctx *miscdev_ctx)$/;"	f
ecryptfs_init_netlink	src/libecryptfs/netlink.c	/^int ecryptfs_init_netlink(struct ecryptfs_nl_ctx *nl_ctx)$/;"	f
ecryptfs_insert_params	src/libecryptfs/decision_graph.c	/^int ecryptfs_insert_params(struct ecryptfs_name_val_pair *nvp,$/;"	f
ecryptfs_insert_params_in_subgraph	src/libecryptfs/decision_graph.c	/^int ecryptfs_insert_params_in_subgraph(struct ecryptfs_name_val_pair *nvp,$/;"	f
ecryptfs_insert_wrapped_passphrase_into_keyring	src/libecryptfs/key_management.c	/^int ecryptfs_insert_wrapped_passphrase_into_keyring($/;"	f
ecryptfs_insert_wrapped_passphrase_into_keyring_DEPENDENCIES	src/utils/Makefile	/^ecryptfs_insert_wrapped_passphrase_into_keyring_DEPENDENCIES =  \\$/;"	m
ecryptfs_insert_wrapped_passphrase_into_keyring_LDADD	src/utils/Makefile	/^ecryptfs_insert_wrapped_passphrase_into_keyring_LDADD = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la$/;"	m
ecryptfs_insert_wrapped_passphrase_into_keyring_OBJECTS	src/utils/Makefile	/^ecryptfs_insert_wrapped_passphrase_into_keyring_OBJECTS =  \\$/;"	m
ecryptfs_insert_wrapped_passphrase_into_keyring_SOURCES	src/utils/Makefile	/^ecryptfs_insert_wrapped_passphrase_into_keyring_SOURCES = ecryptfs_insert_wrapped_passphrase_into_keyring.c$/;"	m
ecryptfs_key_bytes_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node ecryptfs_key_bytes_param_node = {$/;"	v	typeref:struct:param_node	file:
ecryptfs_key_bytes_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node ecryptfs_key_bytes_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
ecryptfs_key_mod	src/include/ecryptfs.h	/^struct ecryptfs_key_mod {$/;"	s
ecryptfs_key_mod_ops	src/include/ecryptfs.h	/^struct ecryptfs_key_mod_ops {$/;"	s
ecryptfs_linear_subgraph_val_tf	src/libecryptfs/decision_graph.c	/^ecryptfs_linear_subgraph_val_tf(struct ecryptfs_ctx *ctx,$/;"	f	file:
ecryptfs_manager_CFLAGS	src/utils/Makefile	/^ecryptfs_manager_CFLAGS = $(AM_CFLAGS) $(KEYUTILS_CFLAGS) $(LIBGCRYPT_CFLAGS)$/;"	m
ecryptfs_manager_DEPENDENCIES	src/utils/Makefile	/^ecryptfs_manager_DEPENDENCIES =  \\$/;"	m
ecryptfs_manager_LDADD	src/utils/Makefile	/^ecryptfs_manager_LDADD = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la $(KEYUTILS_LIBS) $(LIBGCRYPT_LIBS)$/;"	m
ecryptfs_manager_LINK	src/utils/Makefile	/^ecryptfs_manager_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
ecryptfs_manager_OBJECTS	src/utils/Makefile	/^ecryptfs_manager_OBJECTS = $(am_ecryptfs_manager_OBJECTS)$/;"	m
ecryptfs_manager_SOURCES	src/utils/Makefile	/^ecryptfs_manager_SOURCES = manager.c io.c io.h gen_key.c$/;"	m
ecryptfs_map_flags	src/libecryptfs/decision_graph.c	/^static int ecryptfs_map_flags(uint32_t *param_flags, uint32_t nvp_flags)$/;"	f	file:
ecryptfs_message	src/include/ecryptfs.h	/^struct ecryptfs_message {$/;"	s
ecryptfs_messaging_ctx	src/include/ecryptfs.h	/^struct ecryptfs_messaging_ctx {$/;"	s
ecryptfs_messaging_exit	src/libecryptfs/messaging.c	/^int ecryptfs_messaging_exit(struct ecryptfs_messaging_ctx *mctx)$/;"	f
ecryptfs_miscdev_ctx	src/include/ecryptfs.h	/^struct ecryptfs_miscdev_ctx {$/;"	s
ecryptfs_mount	src/libecryptfs/main.c	/^int ecryptfs_mount(char *source, char *target, unsigned long flags, char *opts)$/;"	f
ecryptfs_name_val_pair	src/include/ecryptfs.h	/^struct ecryptfs_name_val_pair {$/;"	s
ecryptfs_nl_ctx	src/include/ecryptfs.h	/^struct ecryptfs_nl_ctx {$/;"	s
ecryptfs_nvp_list_union	src/libecryptfs/cmd_ln_parser.c	/^int ecryptfs_nvp_list_union(struct ecryptfs_name_val_pair *dst,$/;"	f
ecryptfs_openssl_decrypt	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int ecryptfs_openssl_decrypt(char *to, size_t *to_size, char *from,$/;"	f	file:
ecryptfs_openssl_deserialize	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int ecryptfs_openssl_deserialize(struct openssl_data *openssl_data,$/;"	f	file:
ecryptfs_openssl_destroy_openssl_data	src/key_mod/ecryptfs_key_mod_openssl.c	/^ecryptfs_openssl_destroy_openssl_data(struct openssl_data *openssl_data)$/;"	f	file:
ecryptfs_openssl_destroy_subgraph_ctx	src/key_mod/ecryptfs_key_mod_openssl.c	/^ecryptfs_openssl_destroy_subgraph_ctx(struct ecryptfs_subgraph_ctx *ctx)$/;"	f	file:
ecryptfs_openssl_encrypt	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int ecryptfs_openssl_encrypt(char *to, size_t *to_size, char *from,$/;"	f	file:
ecryptfs_openssl_finalize	src/key_mod/ecryptfs_key_mod_openssl.c	/^int ecryptfs_openssl_finalize(void)$/;"	f
ecryptfs_openssl_gen_key_param_nodes	src/key_mod/ecryptfs_key_mod_openssl.c	/^static struct param_node ecryptfs_openssl_gen_key_param_nodes[] = {$/;"	v	typeref:struct:param_node	file:
ecryptfs_openssl_generate_key	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int ecryptfs_openssl_generate_key(struct openssl_data *openssl_data)$/;"	f	file:
ecryptfs_openssl_generate_signature	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int ecryptfs_openssl_generate_signature(char *sig, RSA *key)$/;"	f	file:
ecryptfs_openssl_get_blob	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int ecryptfs_openssl_get_blob(unsigned char *blob, size_t *blob_size,$/;"	f	file:
ecryptfs_openssl_get_gen_key_param_subgraph_trans_node	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int ecryptfs_openssl_get_gen_key_param_subgraph_trans_node($/;"	f	file:
ecryptfs_openssl_get_key_sig	src/key_mod/ecryptfs_key_mod_openssl.c	/^int ecryptfs_openssl_get_key_sig(unsigned char *sig, unsigned char *blob)$/;"	f
ecryptfs_openssl_get_param_subgraph_trans_node	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int ecryptfs_openssl_get_param_subgraph_trans_node($/;"	f	file:
ecryptfs_openssl_init	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int ecryptfs_openssl_init(char **alias)$/;"	f	file:
ecryptfs_openssl_mkdir_recursive	src/key_mod/ecryptfs_key_mod_openssl.c	/^ecryptfs_openssl_mkdir_recursive(char *dir, mode_t mode)$/;"	f	file:
ecryptfs_openssl_ops	src/key_mod/ecryptfs_key_mod_openssl.c	/^static struct ecryptfs_key_mod_ops ecryptfs_openssl_ops = {$/;"	v	typeref:struct:ecryptfs_key_mod_ops	file:
ecryptfs_openssl_process_key	src/key_mod/ecryptfs_key_mod_openssl.c	/^ecryptfs_openssl_process_key(struct ecryptfs_subgraph_ctx *subgraph_ctx,$/;"	f	file:
ecryptfs_openssl_read_key	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int ecryptfs_openssl_read_key(RSA **rsa, unsigned char *blob)$/;"	f	file:
ecryptfs_openssl_serialize	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int ecryptfs_openssl_serialize(unsigned char *blob, size_t *blob_size,$/;"	f	file:
ecryptfs_openssl_write_key_to_file	src/key_mod/ecryptfs_key_mod_openssl.c	/^ecryptfs_openssl_write_key_to_file(RSA *rsa, char *filename, char *passphrase)$/;"	f	file:
ecryptfs_page_crypt_context	src/utils/test.c	/^struct ecryptfs_page_crypt_context {$/;"	s	file:
ecryptfs_pam_automount_set	src/pam_ecryptfs/pam_ecryptfs.c	/^static int ecryptfs_pam_automount_set(const char *homedir)$/;"	f	file:
ecryptfs_parse_header_metadata	src/libecryptfs/ecryptfs-stat.c	/^ecryptfs_parse_header_metadata(struct ecryptfs_crypt_stat_user *crypt_stat,$/;"	f	file:
ecryptfs_parse_options	src/libecryptfs/cmd_ln_parser.c	/^int ecryptfs_parse_options(char *opts, struct ecryptfs_name_val_pair *head)$/;"	f
ecryptfs_parse_packet_length	src/libecryptfs/messaging.c	/^int ecryptfs_parse_packet_length(unsigned char *data, size_t *size,$/;"	f
ecryptfs_parse_rc_file	src/libecryptfs/cmd_ln_parser.c	/^int ecryptfs_parse_rc_file(struct ecryptfs_name_val_pair *nvp_list_head)$/;"	f
ecryptfs_parse_rc_file_fullpath	src/libecryptfs/cmd_ln_parser.c	/^ecryptfs_parse_rc_file_fullpath(struct ecryptfs_name_val_pair *nvp_list_head,$/;"	f
ecryptfs_parse_stat	src/libecryptfs/ecryptfs-stat.c	/^int ecryptfs_parse_stat(struct ecryptfs_crypt_stat_user *crypt_stat, char *buf,$/;"	f
ecryptfs_passphrase_blob	src/libecryptfs/key_management.c	/^binary_data ecryptfs_passphrase_blob(char *salt, char *passphrase)$/;"	f
ecryptfs_passphrase_destroy	src/key_mod/ecryptfs_key_mod_passphrase.c	/^static int ecryptfs_passphrase_destroy(unsigned char *blob)$/;"	f	file:
ecryptfs_passphrase_finalize	src/key_mod/ecryptfs_key_mod_passphrase.c	/^static int ecryptfs_passphrase_finalize(void)$/;"	f	file:
ecryptfs_passphrase_get_param_subgraph_trans_node	src/key_mod/ecryptfs_key_mod_passphrase.c	/^static int ecryptfs_passphrase_get_param_subgraph_trans_node($/;"	f	file:
ecryptfs_passphrase_init	src/key_mod/ecryptfs_key_mod_passphrase.c	/^static int ecryptfs_passphrase_init(char **alias)$/;"	f	file:
ecryptfs_passphrase_ops	src/key_mod/ecryptfs_key_mod_passphrase.c	/^struct ecryptfs_key_mod_ops ecryptfs_passphrase_ops = {$/;"	v	typeref:struct:ecryptfs_key_mod_ops
ecryptfs_passphrase_sig_from_blob	src/libecryptfs/key_management.c	/^binary_data ecryptfs_passphrase_sig_from_blob(char *blob)$/;"	f
ecryptfs_password	src/include/ecryptfs.h	/^struct ecryptfs_password {$/;"	s
ecryptfs_pkcs11h_decrypt	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int ecryptfs_pkcs11h_decrypt(char *to, size_t *to_size, char *from,$/;"	f	file:
ecryptfs_pkcs11h_deserialize	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int ecryptfs_pkcs11h_deserialize(struct pkcs11h_data *pkcs11h_data,$/;"	f	file:
ecryptfs_pkcs11h_encrypt	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int ecryptfs_pkcs11h_encrypt(char *to, size_t *to_size, char *from,$/;"	f	file:
ecryptfs_pkcs11h_finalize	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int ecryptfs_pkcs11h_finalize(void)$/;"	f	file:
ecryptfs_pkcs11h_get_key_sig	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int ecryptfs_pkcs11h_get_key_sig(unsigned char *sig, unsigned char *blob)$/;"	f	file:
ecryptfs_pkcs11h_get_param_subgraph_trans_node	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int ecryptfs_pkcs11h_get_param_subgraph_trans_node($/;"	f	file:
ecryptfs_pkcs11h_get_public_key	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int ecryptfs_pkcs11h_get_public_key(RSA **rsa, unsigned char *blob)$/;"	f	file:
ecryptfs_pkcs11h_init	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int ecryptfs_pkcs11h_init(char **alias)$/;"	f	file:
ecryptfs_pkcs11h_ops	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static struct ecryptfs_key_mod_ops ecryptfs_pkcs11h_ops = {$/;"	v	typeref:struct:ecryptfs_key_mod_ops	file:
ecryptfs_pkcs11h_parse_file	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int ecryptfs_pkcs11h_parse_file(struct param_node *param_nodes)$/;"	f	file:
ecryptfs_pkcs11h_process_key	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int ecryptfs_pkcs11h_process_key(struct pkcs11h_subgraph_key_ctx *subgraph_key_ctx,$/;"	f	file:
ecryptfs_pkcs11h_serialize	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int ecryptfs_pkcs11h_serialize(unsigned char *blob, size_t *blob_size,$/;"	f	file:
ecryptfs_private_is_mounted	src/libecryptfs/main.c	/^int ecryptfs_private_is_mounted(char *dev, char *mnt, char *sig, int mounting) {$/;"	f
ecryptfs_private_key	src/include/ecryptfs.h	/^struct ecryptfs_private_key {$/;"	s
ecryptfs_process_decision_graph	src/libecryptfs/module_mgr.c	/^int ecryptfs_process_decision_graph(struct ecryptfs_ctx *ctx,$/;"	f
ecryptfs_process_flags	src/libecryptfs/ecryptfs-stat.c	/^static int ecryptfs_process_flags(struct ecryptfs_crypt_stat_user *crypt_stat,$/;"	f	file:
ecryptfs_process_key_gen_decision_graph	src/libecryptfs/module_mgr.c	/^int ecryptfs_process_key_gen_decision_graph(struct ecryptfs_ctx *ctx,$/;"	f
ecryptfs_read_in_page	src/utils/test.c	/^int ecryptfs_read_in_page(struct ecryptfs_page_crypt_context *ctx,$/;"	f
ecryptfs_read_salt_hex_from_rc	src/libecryptfs/key_management.c	/^int ecryptfs_read_salt_hex_from_rc(char *salt_hex)$/;"	f
ecryptfs_recv_miscdev	src/libecryptfs/miscdev.c	/^int ecryptfs_recv_miscdev(struct ecryptfs_miscdev_ctx *miscdev_ctx,$/;"	f
ecryptfs_recv_netlink	src/libecryptfs/netlink.c	/^int ecryptfs_recv_netlink(struct ecryptfs_nl_ctx *nl_ctx,$/;"	f
ecryptfs_register_key_modules	src/libecryptfs/key_mod.c	/^int ecryptfs_register_key_modules(struct ecryptfs_ctx* ctx)$/;"	f
ecryptfs_release_miscdev	src/libecryptfs/miscdev.c	/^void ecryptfs_release_miscdev(struct ecryptfs_miscdev_ctx *miscdev_ctx)$/;"	f
ecryptfs_release_netlink	src/libecryptfs/netlink.c	/^void ecryptfs_release_netlink(struct ecryptfs_nl_ctx *nl_ctx)$/;"	f
ecryptfs_remove_auth_tok_from_keyring	src/libecryptfs/key_management.c	/^int ecryptfs_remove_auth_tok_from_keyring(char *auth_tok_sig)$/;"	f
ecryptfs_rewrap_passphrase_DEPENDENCIES	src/utils/Makefile	/^ecryptfs_rewrap_passphrase_DEPENDENCIES =  \\$/;"	m
ecryptfs_rewrap_passphrase_LDADD	src/utils/Makefile	/^ecryptfs_rewrap_passphrase_LDADD = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la$/;"	m
ecryptfs_rewrap_passphrase_OBJECTS	src/utils/Makefile	/^ecryptfs_rewrap_passphrase_OBJECTS =  \\$/;"	m
ecryptfs_rewrap_passphrase_SOURCES	src/utils/Makefile	/^ecryptfs_rewrap_passphrase_SOURCES = ecryptfs_rewrap_passphrase.c$/;"	m
ecryptfs_run_daemon	src/libecryptfs/messaging.c	/^int ecryptfs_run_daemon(struct ecryptfs_messaging_ctx *mctx)$/;"	f
ecryptfs_run_miscdev_daemon	src/libecryptfs/miscdev.c	/^int ecryptfs_run_miscdev_daemon(struct ecryptfs_miscdev_ctx *miscdev_ctx)$/;"	f
ecryptfs_run_netlink_daemon	src/libecryptfs/netlink.c	/^int ecryptfs_run_netlink_daemon(struct ecryptfs_nl_ctx *nl_ctx)$/;"	f
ecryptfs_select_key_mod	src/utils/io.c	/^int ecryptfs_select_key_mod(struct ecryptfs_key_mod **key_mod,$/;"	f
ecryptfs_send_message	src/libecryptfs/messaging.c	/^int ecryptfs_send_message(struct ecryptfs_messaging_ctx *mctx,$/;"	f
ecryptfs_send_miscdev	src/libecryptfs/miscdev.c	/^int ecryptfs_send_miscdev(struct ecryptfs_miscdev_ctx *miscdev_ctx,$/;"	f
ecryptfs_send_netlink	src/libecryptfs/netlink.c	/^int ecryptfs_send_netlink(struct ecryptfs_nl_ctx *nl_ctx,$/;"	f
ecryptfs_session_key	src/include/ecryptfs.h	/^struct ecryptfs_session_key {$/;"	s
ecryptfs_set_exit_param_on_graph	src/libecryptfs/decision_graph.c	/^int ecryptfs_set_exit_param_on_graph(struct param_node *param_node,$/;"	f
ecryptfs_sort_ciphers	src/libecryptfs/cipher_list.c	/^int ecryptfs_sort_ciphers(struct cipher_descriptor *cd_head)$/;"	f
ecryptfs_stat_DEPENDENCIES	src/utils/Makefile	/^ecryptfs_stat_DEPENDENCIES =  \\$/;"	m
ecryptfs_stat_LDADD	src/utils/Makefile	/^ecryptfs_stat_LDADD = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la$/;"	m
ecryptfs_stat_OBJECTS	src/utils/Makefile	/^ecryptfs_stat_OBJECTS = $(am_ecryptfs_stat_OBJECTS)$/;"	m
ecryptfs_stat_SOURCES	src/utils/Makefile	/^ecryptfs_stat_SOURCES = ecryptfs-stat.c$/;"	m
ecryptfs_subgraph_ctx	src/key_mod/ecryptfs_key_mod_openssl.c	/^struct ecryptfs_subgraph_ctx {$/;"	s	file:
ecryptfs_subgraph_ctx	src/libecryptfs/decision_graph.c	/^struct ecryptfs_subgraph_ctx {$/;"	s	file:
ecryptfs_supports_filename_encryption	src/libecryptfs/sysfs.c	/^int ecryptfs_supports_filename_encryption(uint32_t version)$/;"	f
ecryptfs_supports_hmac	src/libecryptfs/sysfs.c	/^int ecryptfs_supports_hmac(uint32_t version)$/;"	f
ecryptfs_supports_passphrase	src/libecryptfs/sysfs.c	/^int ecryptfs_supports_passphrase(uint32_t version)$/;"	f
ecryptfs_supports_plaintext_passthrough	src/libecryptfs/sysfs.c	/^int ecryptfs_supports_plaintext_passthrough(uint32_t version)$/;"	f
ecryptfs_supports_policy	src/libecryptfs/sysfs.c	/^int ecryptfs_supports_policy(uint32_t version)$/;"	f
ecryptfs_supports_pubkey	src/libecryptfs/sysfs.c	/^int ecryptfs_supports_pubkey(uint32_t version)$/;"	f
ecryptfs_supports_xattr	src/libecryptfs/sysfs.c	/^int ecryptfs_supports_xattr(uint32_t version)$/;"	f
ecryptfs_syslog	src/include/ecryptfs.h	151;"	d
ecryptfs_ticket_list_lock	src/key_mod/ecryptfs_key_mod_tspi.c	/^static pthread_mutex_t ecryptfs_ticket_list_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
ecryptfs_token_types	src/include/ecryptfs.h	/^enum ecryptfs_token_types {ECRYPTFS_PASSWORD, ECRYPTFS_PRIVATE_KEY};$/;"	g
ecryptfs_tspi_connect_ticket	src/key_mod/ecryptfs_key_mod_tspi.c	/^struct ecryptfs_tspi_connect_ticket {$/;"	s	file:
ecryptfs_tspi_decrypt	src/key_mod/ecryptfs_key_mod_tspi.c	/^ecryptfs_tspi_decrypt(char *to, size_t *to_size, char *from, size_t from_size,$/;"	f	file:
ecryptfs_tspi_deserialize	src/key_mod/ecryptfs_key_mod_tspi.c	/^ecryptfs_tspi_deserialize(struct tspi_data *tspi_data, unsigned char *blob)$/;"	f	file:
ecryptfs_tspi_destroy	src/key_mod/ecryptfs_key_mod_tspi.c	/^static int ecryptfs_tspi_destroy(unsigned char *blob)$/;"	f	file:
ecryptfs_tspi_encrypt	src/key_mod/ecryptfs_key_mod_tspi.c	/^ecryptfs_tspi_encrypt(char *to, size_t *to_size, char *from, size_t from_size,$/;"	f	file:
ecryptfs_tspi_finalize	src/key_mod/ecryptfs_key_mod_tspi.c	/^static int ecryptfs_tspi_finalize(void)$/;"	f	file:
ecryptfs_tspi_generate_signature	src/key_mod/ecryptfs_key_mod_tspi.c	/^static int ecryptfs_tspi_generate_signature(char *sig, BYTE *n, uint32_t nbytes)$/;"	f	file:
ecryptfs_tspi_get_blob	src/key_mod/ecryptfs_key_mod_tspi.c	/^static int ecryptfs_tspi_get_blob(unsigned char *blob, size_t *blob_size,$/;"	f	file:
ecryptfs_tspi_get_key_sig	src/key_mod/ecryptfs_key_mod_tspi.c	/^static int ecryptfs_tspi_get_key_sig(unsigned char *sig, unsigned char *blob)$/;"	f	file:
ecryptfs_tspi_get_params	src/key_mod/ecryptfs_key_mod_tspi.c	/^ecryptfs_tspi_get_params(struct key_mod_param **params, uint32_t *num_params)$/;"	f	file:
ecryptfs_tspi_grab_ticket	src/key_mod/ecryptfs_key_mod_tspi.c	/^ecryptfs_tspi_grab_ticket(struct ecryptfs_tspi_connect_ticket **ret_ticket)$/;"	f	file:
ecryptfs_tspi_init	src/key_mod/ecryptfs_key_mod_tspi.c	/^static int ecryptfs_tspi_init(char **alias)$/;"	f	file:
ecryptfs_tspi_init_from_param_vals	src/key_mod/ecryptfs_key_mod_tspi.c	/^ecryptfs_tspi_init_from_param_vals(struct tspi_data *tspi_data,$/;"	f	file:
ecryptfs_tspi_num_tickets_connected	src/key_mod/ecryptfs_key_mod_tspi.c	/^static uint32_t ecryptfs_tspi_num_tickets_connected;$/;"	v	file:
ecryptfs_tspi_num_tickets_free	src/key_mod/ecryptfs_key_mod_tspi.c	/^static uint32_t ecryptfs_tspi_num_tickets_free;$/;"	v	file:
ecryptfs_tspi_num_tickets_used	src/key_mod/ecryptfs_key_mod_tspi.c	/^static uint32_t ecryptfs_tspi_num_tickets_used;$/;"	v	file:
ecryptfs_tspi_ops	src/key_mod/ecryptfs_key_mod_tspi.c	/^static struct ecryptfs_key_mod_ops ecryptfs_tspi_ops = {$/;"	v	typeref:struct:ecryptfs_key_mod_ops	file:
ecryptfs_tspi_release_ticket	src/key_mod/ecryptfs_key_mod_tspi.c	/^ecryptfs_tspi_release_ticket(struct ecryptfs_tspi_connect_ticket *ticket)$/;"	f	file:
ecryptfs_tspi_serialize	src/key_mod/ecryptfs_key_mod_tspi.c	/^static int ecryptfs_tspi_serialize(unsigned char *blob, size_t *blob_size,$/;"	f	file:
ecryptfs_tspi_srk_uuid	src/key_mod/ecryptfs_key_mod_tspi.c	/^static TSS_UUID ecryptfs_tspi_srk_uuid = TSS_UUID_SRK;$/;"	v	file:
ecryptfs_tspi_to_hex	src/key_mod/ecryptfs_key_mod_tspi.c	/^static void ecryptfs_tspi_to_hex(char *dst, char *src, int src_size)$/;"	f	file:
ecryptfs_unmap_and_release_lower_page	src/utils/test.c	/^void ecryptfs_unmap_and_release_lower_page(struct page *lower_page)$/;"	f
ecryptfs_unwrap_passphrase	src/libecryptfs/key_management.c	/^int ecryptfs_unwrap_passphrase(char *decrypted_passphrase, char *filename,$/;"	f
ecryptfs_unwrap_passphrase_DEPENDENCIES	src/utils/Makefile	/^ecryptfs_unwrap_passphrase_DEPENDENCIES =  \\$/;"	m
ecryptfs_unwrap_passphrase_LDADD	src/utils/Makefile	/^ecryptfs_unwrap_passphrase_LDADD = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la$/;"	m
ecryptfs_unwrap_passphrase_OBJECTS	src/utils/Makefile	/^ecryptfs_unwrap_passphrase_OBJECTS =  \\$/;"	m
ecryptfs_unwrap_passphrase_SOURCES	src/utils/Makefile	/^ecryptfs_unwrap_passphrase_SOURCES = ecryptfs_unwrap_passphrase.c$/;"	m
ecryptfs_validate_keyring	src/libecryptfs/key_management.c	/^int ecryptfs_validate_keyring(void)$/;"	f
ecryptfs_validate_mount_opts	src/utils/mount.ecryptfs.c	/^static int ecryptfs_validate_mount_opts(char *opts)$/;"	f	file:
ecryptfs_verbosity	src/libecryptfs/main.c	/^int ecryptfs_verbosity = 0; \/\/ hyunk$/;"	v
ecryptfs_version_str_map	src/libecryptfs/sysfs.c	/^} ecryptfs_version_str_map[] = {$/;"	v	typeref:struct:ecryptfs_version_str_map_elem
ecryptfs_version_str_map_elem	src/libecryptfs/sysfs.c	/^struct ecryptfs_version_str_map_elem {$/;"	s	file:
ecryptfs_version_support_node	src/libecryptfs/module_mgr.c	/^static struct param_node ecryptfs_version_support_node = {$/;"	v	typeref:struct:param_node	file:
ecryptfs_version_support_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node ecryptfs_version_support_node_orig = {$/;"	v	typeref:struct:param_node	file:
ecryptfs_wrap_passphrase	src/libecryptfs/key_management.c	/^int ecryptfs_wrap_passphrase(char *filename, char *wrapping_passphrase,$/;"	f
ecryptfs_wrap_passphrase_DEPENDENCIES	src/utils/Makefile	/^ecryptfs_wrap_passphrase_DEPENDENCIES =  \\$/;"	m
ecryptfs_wrap_passphrase_LDADD	src/utils/Makefile	/^ecryptfs_wrap_passphrase_LDADD = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la$/;"	m
ecryptfs_wrap_passphrase_OBJECTS	src/utils/Makefile	/^ecryptfs_wrap_passphrase_OBJECTS =  \\$/;"	m
ecryptfs_wrap_passphrase_SOURCES	src/utils/Makefile	/^ecryptfs_wrap_passphrase_SOURCES = ecryptfs_wrap_passphrase.c$/;"	m
ecryptfs_wrap_passphrase_file	src/libecryptfs/key_management.c	/^int ecryptfs_wrap_passphrase_file(char *dest, char *wrapping_passphrase,$/;"	f
ecryptfs_write_out_page	src/utils/test.c	/^int ecryptfs_write_out_page(struct ecryptfs_page_crypt_context *ctx,$/;"	f
ecryptfs_write_packet_length	src/libecryptfs/messaging.c	/^int ecryptfs_write_packet_length(char *dest, size_t size,$/;"	f
ecryptfs_writepage_and_release_lower_page	src/utils/test.c	/^int ecryptfs_writepage_and_release_lower_page(struct page *lower_page,$/;"	f
ecryptfsd_exit	src/daemon/main.c	/^static void ecryptfsd_exit(struct ecryptfs_messaging_ctx *mctx, int retval)$/;"	f	file:
ecryptfskeymoddir	src/pam_ecryptfs/Makefile	/^ecryptfskeymoddir = $(libdir)\/ecryptfs$/;"	m
ecryptfskeymoddir	src/utils/Makefile	/^ecryptfskeymoddir = $(libdir)\/ecryptfs$/;"	m
enable_echo	src/utils/io.c	/^static int enable_echo(struct termios *saved_settings)$/;"	f	file:
enable_filename_crypto_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node enable_filename_crypto_param_node = {$/;"	v	typeref:struct:param_node	file:
enable_filename_crypto_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node enable_filename_crypto_param_node;$/;"	v	typeref:struct:param_node	file:
enable_filename_crypto_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node enable_filename_crypto_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
enabled	src/libecryptfs/cipher_list.c	/^	uint32_t enabled;$/;"	m	struct:cipher_name_module_map	file:
encrypt	src/include/ecryptfs.h	/^	int (*encrypt)(char *to, size_t *to_size, char *from, size_t from_size,$/;"	m	struct:ecryptfs_key_mod_ops
encrypt_lock	src/key_mod/ecryptfs_key_mod_tspi.c	/^static pthread_mutex_t encrypt_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
encrypted_key	src/include/ecryptfs.h	/^	uint8_t encrypted_key[ECRYPTFS_MAX_ENCRYPTED_KEY_BYTES];$/;"	m	struct:ecryptfs_session_key
encrypted_key_size	src/include/ecryptfs.h	/^	int32_t encrypted_key_size;$/;"	m	struct:ecryptfs_session_key
encrypted_passthrough_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node encrypted_passthrough_param_node = {$/;"	v	typeref:struct:param_node	file:
encrypted_passthrough_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node encrypted_passthrough_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
end_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node end_param_node = {$/;"	v	typeref:struct:param_node	file:
end_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node end_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
error	src/pam_ecryptfs/pam_ecryptfs.c	/^static void error(const char *msg)$/;"	f	file:
eval_param_tree	src/libecryptfs/decision_graph.c	/^int eval_param_tree(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f
exec_prefix	src/pam_ecryptfs/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	src/utils/Makefile	/^exec_prefix = ${prefix}$/;"	m
extent_num	src/utils/test.c	/^	unsigned long extent_num;$/;"	m	struct:translation_test_vector_element	file:
extent_size	src/include/ecryptfs.h	/^	size_t extent_size;$/;"	m	struct:ecryptfs_crypt_stat_user
extent_size	src/utils/test.c	/^	int extent_size;$/;"	m	struct:ecryptfs_crypt_stat	file:
extent_size	src/utils/test.c	/^	int extent_size;$/;"	m	struct:upper_lower_test_vector_element	file:
fetch_pwd	src/pam_ecryptfs/pam_ecryptfs.c	/^static struct passwd *fetch_pwd(pam_handle_t *pamh)$/;"	f	file:
fetch_sig	src/utils/mount.ecryptfs_private.c	/^char *fetch_sig(char *pw_dir, int entry) {$/;"	f
file	src/utils/test.c	/^struct file {$/;"	s	file:
file_flag	src/libecryptfs/ecryptfs-stat.c	/^	uint32_t file_flag;$/;"	m	struct:ecryptfs_flag_map_elem	file:
file_in	src/include/ecryptfs.h	/^	FILE *file_in;$/;"	m	struct:ecryptfs_ctx
file_out	src/include/ecryptfs.h	/^	FILE *file_out;$/;"	m	struct:ecryptfs_ctx
file_size	src/include/ecryptfs.h	/^	uint64_t file_size;$/;"	m	struct:ecryptfs_crypt_stat_user
file_version	src/include/ecryptfs.h	/^	unsigned int file_version;$/;"	m	struct:ecryptfs_crypt_stat_user
filename_crypto_fnek_sig_callback	src/libecryptfs/module_mgr.c	/^static int filename_crypto_fnek_sig_callback(struct ecryptfs_ctx *ctx,$/;"	f	file:
filename_crypto_fnek_sig_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node filename_crypto_fnek_sig_param_node = {$/;"	v	typeref:struct:param_node	file:
filename_crypto_fnek_sig_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node filename_crypto_fnek_sig_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
fill_in_decision_graph_based_on_version_support	src/libecryptfs/module_mgr.c	/^fill_in_decision_graph_based_on_version_support(struct param_node *root,$/;"	f	file:
fill_in_sig_transitions	src/key_mod/ecryptfs_key_mod_gpg.c	/^int fill_in_sig_transitions(void)$/;"	f
finalize	src/include/ecryptfs.h	/^	int (*finalize)(void);$/;"	m	struct:ecryptfs_key_mod_ops
find_pid_for_this_sid	src/libecryptfs/main.c	/^static int find_pid_for_this_sid(pid_t *pid, int shm_id)$/;"	f	file:
flag	src/libecryptfs/sysfs.c	/^	uint32_t flag;$/;"	m	struct:ecryptfs_version_str_map_elem	file:
flag_dst	src/libecryptfs/decision_graph.c	/^	uint32_t flag_dst;$/;"	m	struct:flag_map	file:
flag_map	src/libecryptfs/decision_graph.c	/^static struct flag_map {$/;"	s	file:
flag_src	src/libecryptfs/decision_graph.c	/^	uint32_t flag_src;$/;"	m	struct:flag_map	file:
flags	src/include/decision_graph.h	/^	uint32_t flags;$/;"	m	struct:transition_node
flags	src/include/decision_graph.h	/^        uint32_t flags;$/;"	m	struct:param_node
flags	src/include/ecryptfs.h	/^	int32_t flags;$/;"	m	struct:ecryptfs_session_key
flags	src/include/ecryptfs.h	/^	uint32_t flags;$/;"	m	struct:cipher_descriptor
flags	src/include/ecryptfs.h	/^	uint32_t flags;$/;"	m	struct:ecryptfs_auth_tok
flags	src/include/ecryptfs.h	/^	uint32_t flags;$/;"	m	struct:ecryptfs_crypt_stat_user
flags	src/include/ecryptfs.h	/^	uint32_t flags;$/;"	m	struct:ecryptfs_name_val_pair
flags	src/include/ecryptfs.h	/^	uint32_t flags;$/;"	m	struct:ecryptfs_password
flags	src/include/ecryptfs.h	/^	uint32_t flags;$/;"	m	struct:key_mod_param
flags	src/key_mod/ecryptfs_key_mod_gpg.c	/^	uint32_t flags;$/;"	m	struct:key_mod_gpg	file:
flags	src/key_mod/ecryptfs_key_mod_gpg.c	/^	uint32_t flags;$/;"	m	struct:pki_nvp_map_elem	file:
flags	src/key_mod/ecryptfs_key_mod_tspi.c	/^	uint32_t flags;$/;"	m	struct:ecryptfs_tspi_connect_ticket	file:
free_name_val_pairs	src/libecryptfs/decision_graph.c	/^int free_name_val_pairs(struct ecryptfs_name_val_pair *pair)$/;"	f
from_hex	src/libecryptfs/main.c	/^void from_hex(char *dst, char *src, int dst_size)$/;"	f
generate_name_val_list	src/key_mod/ecryptfs_key_mod_gpg.c	/^static int generate_name_val_list(struct ecryptfs_name_val_pair *head)$/;"	f	file:
generate_nv_list	src/libecryptfs/cmd_ln_parser.c	/^int generate_nv_list(struct ecryptfs_name_val_pair *head, char *buf)$/;"	f
generate_passphrase_sig	src/libecryptfs/main.c	/^generate_passphrase_sig(char *passphrase_sig, char *fekek,$/;"	f
generate_payload	src/libecryptfs/main.c	/^generate_payload(struct ecryptfs_auth_tok *auth_tok, char *passphrase_sig,$/;"	f
get_attr	src/libecryptfs-swig/libecryptfs_wrap.c	/^    PyObject *(*get_attr)(void);       \/* Return the current value *\/$/;"	m	struct:swig_globalvar	file:
get_blob	src/include/ecryptfs.h	/^	int (*get_blob)(unsigned char *blob, size_t *blob_size,$/;"	m	struct:ecryptfs_key_mod_ops
get_decryption_only	src/libecryptfs/module_mgr.c	/^static int get_decryption_only(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
get_enable_filename_crypto	src/libecryptfs/module_mgr.c	/^static int get_enable_filename_crypto(struct ecryptfs_ctx *ctx,$/;"	f	file:
get_encrypted_passthrough	src/libecryptfs/module_mgr.c	/^static int get_encrypted_passthrough(struct ecryptfs_ctx *ctx,$/;"	f	file:
get_gen_key_params	src/include/ecryptfs.h	/^	int (*get_gen_key_params)(struct key_mod_param **params,$/;"	m	struct:ecryptfs_key_mod_ops
get_gen_key_subgraph_trans_node	src/include/ecryptfs.h	/^	int (*get_gen_key_subgraph_trans_node)(struct transition_node **trans,$/;"	m	struct:ecryptfs_key_mod_ops
get_hmac	src/libecryptfs/module_mgr.c	/^static int get_hmac(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
get_key_data	src/include/ecryptfs.h	/^	int (*get_key_data)(unsigned char *key_data, size_t *key_data_len,$/;"	m	struct:ecryptfs_key_mod_ops
get_key_hint	src/include/ecryptfs.h	/^	int (*get_key_hint)(unsigned char *hint, size_t *hint_len,$/;"	m	struct:ecryptfs_key_mod_ops
get_key_mod_ops	src/key_mod/ecryptfs_key_mod_gpg.c	/^struct ecryptfs_key_mod_ops *get_key_mod_ops(void)$/;"	f
get_key_mod_ops	src/key_mod/ecryptfs_key_mod_openssl.c	/^struct ecryptfs_key_mod_ops *get_key_mod_ops(void)$/;"	f
get_key_mod_ops	src/key_mod/ecryptfs_key_mod_passphrase.c	/^struct ecryptfs_key_mod_ops *get_key_mod_ops(void)$/;"	f
get_key_mod_ops	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^struct ecryptfs_key_mod_ops *get_key_mod_ops(void)$/;"	f
get_key_mod_ops	src/key_mod/ecryptfs_key_mod_tspi.c	/^struct ecryptfs_key_mod_ops *get_key_mod_ops(void)$/;"	f
get_key_sig	src/include/ecryptfs.h	/^	int (*get_key_sig)(unsigned char *sig, unsigned char *blob);$/;"	m	struct:ecryptfs_key_mod_ops
get_mount_opt_value	src/utils/umount.ecryptfs.c	/^static int get_mount_opt_value(char *mnt_opts, char *name, char **value)$/;"	f	file:
get_param_subgraph_trans_node	src/include/ecryptfs.h	/^	int (*get_param_subgraph_trans_node)(struct transition_node **trans,$/;"	m	struct:ecryptfs_key_mod_ops
get_params	src/include/ecryptfs.h	/^	int (*get_params)(struct key_mod_param **params, uint32_t *num_params);$/;"	m	struct:ecryptfs_key_mod_ops
get_passthrough	src/libecryptfs/module_mgr.c	/^static int get_passthrough(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
get_proc_crypto_value	src/libecryptfs/cipher_list.c	/^static int get_proc_crypto_value(char *line, char **value)$/;"	f	file:
get_string	src/include/ecryptfs.h	/^	int (*get_string)(char **val, char *prompt, int echo);$/;"	m	struct:ecryptfs_ctx
get_string	src/utils/io.c	/^int get_string(char *val, int len, int echo)$/;"	f
get_string_stdin	src/utils/io.c	/^int get_string_stdin(char **val, char *prompt, int echo)$/;"	f
get_sysfs_mountpoint	src/libecryptfs/sysfs.c	/^static int get_sysfs_mountpoint(char *mnt, int *mnt_size)$/;"	f	file:
get_verbosity	src/libecryptfs/decision_graph.c	/^static void get_verbosity(struct ecryptfs_name_val_pair *nvp_head,$/;"	f	file:
get_xattr	src/libecryptfs/module_mgr.c	/^static int get_xattr(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
gpg_param_nodes	src/key_mod/ecryptfs_key_mod_gpg.c	/^static struct param_node gpg_param_nodes[] = {$/;"	v	typeref:struct:param_node	file:
gpg_transition	src/key_mod/ecryptfs_key_mod_gpg.c	/^struct transition_node gpg_transition = {$/;"	v	typeref:struct:transition_node
gpgsig	src/key_mod/ecryptfs_key_mod_gpg.c	/^	char *gpgsig;$/;"	m	struct:key_mod_gpg	file:
hKey	src/key_mod/ecryptfs_key_mod_tspi.c	/^	TSS_HKEY hKey;$/;"	m	struct:key_mapper	file:
hash_algo	src/include/ecryptfs.h	/^	int32_t hash_algo;$/;"	m	struct:ecryptfs_password
hash_iterations	src/include/ecryptfs.h	/^	int32_t hash_iterations;$/;"	m	struct:ecryptfs_password
head_val_node	src/libecryptfs/decision_graph.c	/^	struct val_node head_val_node;$/;"	m	struct:ecryptfs_subgraph_ctx	typeref:struct:ecryptfs_subgraph_ctx::val_node	file:
header_extent_size	src/utils/test.c	/^	int header_extent_size;$/;"	m	struct:ecryptfs_crypt_stat	file:
header_extent_size	src/utils/test.c	/^	unsigned long header_extent_size;$/;"	m	struct:translation_test_vector_element	file:
header_extent_size	src/utils/test.c	/^	unsigned long header_extent_size;$/;"	m	struct:upper_lower_test_vector_element	file:
hmac_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node hmac_param_node = {$/;"	v	typeref:struct:param_node	file:
hmac_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node hmac_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
host	src/pam_ecryptfs/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host	src/utils/Makefile	/^host = i686-pc-linux-gnu$/;"	m
host_alias	src/pam_ecryptfs/Makefile	/^host_alias = $/;"	m
host_alias	src/utils/Makefile	/^host_alias = $/;"	m
host_cpu	src/pam_ecryptfs/Makefile	/^host_cpu = i686$/;"	m
host_cpu	src/utils/Makefile	/^host_cpu = i686$/;"	m
host_is_big_endian	src/libecryptfs/ecryptfs-stat.c	/^static int host_is_big_endian(void)$/;"	f	file:
host_os	src/pam_ecryptfs/Makefile	/^host_os = linux-gnu$/;"	m
host_os	src/utils/Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	src/pam_ecryptfs/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_triplet	src/utils/Makefile	/^host_triplet = i686-pc-linux-gnu$/;"	m
host_vendor	src/pam_ecryptfs/Makefile	/^host_vendor = pc$/;"	m
host_vendor	src/utils/Makefile	/^host_vendor = pc$/;"	m
htmldir	src/pam_ecryptfs/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	src/utils/Makefile	/^htmldir = ${docdir}$/;"	m
id	src/include/ecryptfs.h	/^	int id;$/;"	m	struct:key_mod_param
id	src/include/ecryptfs.h	/^	int id;$/;"	m	struct:key_mod_param_val
implicitconv	src/libecryptfs-swig/libecryptfs_wrap.c	/^  int implicitconv;$/;"	m	struct:__anon1	file:
includedir	src/pam_ecryptfs/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	src/utils/Makefile	/^includedir = ${prefix}\/include$/;"	m
increment	src/utils/mount.ecryptfs_private.c	/^int increment(FILE *fh) {$/;"	f
index	src/include/ecryptfs.h	/^	uint32_t index;$/;"	m	struct:ecryptfs_message
index	src/utils/test.c	/^	unsigned long index;$/;"	m	struct:page	file:
infodir	src/pam_ecryptfs/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	src/utils/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
init	src/include/ecryptfs.h	/^	int (*init)(char **alias);$/;"	m	struct:ecryptfs_key_mod_ops
init_ecryptfs_cipher_param_node	src/libecryptfs/module_mgr.c	/^static int init_ecryptfs_cipher_param_node(uint32_t version)$/;"	f	file:
init_ecryptfs_key_bytes_param_node	src/libecryptfs/module_mgr.c	/^static int init_ecryptfs_key_bytes_param_node(char *cipher_name, $/;"	f	file:
init_miscdev_daemon	src/libecryptfs/miscdev.c	/^int init_miscdev_daemon(void)$/;"	f
init_param_node	src/libecryptfs/module_mgr.c	/^void init_param_node(void)$/;"	f
inode	src/utils/test.c	/^struct inode {$/;"	s	file:
install_sh	src/pam_ecryptfs/Makefile	/^install_sh = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/install-sh$/;"	m
install_sh	src/utils/Makefile	/^install_sh = ${SHELL} \/home\/mbhyun\/src\/ecryptfs-utils-83\/install-sh$/;"	m
install_sh_DATA	src/pam_ecryptfs/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	src/utils/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	src/pam_ecryptfs/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	src/utils/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	src/pam_ecryptfs/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	src/utils/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
is_yes	src/libecryptfs/module_mgr.c	/^static int is_yes(const char *str, int on_null)$/;"	f	file:
iv_bytes	src/include/ecryptfs.h	/^	size_t iv_bytes;$/;"	m	struct:ecryptfs_crypt_stat_user
kernel_name	src/include/ecryptfs.h	/^	char *kernel_name;$/;"	m	struct:cipher_str_name_map_elem
kernel_name	src/include/ecryptfs.h	/^	char *kernel_name;$/;"	m	struct:ecryptfs_cipher_elem
key_bytes	src/libecryptfs/module_mgr.c	/^	uint32_t key_bytes;$/;"	m	struct:supported_key_bytes	file:
key_mapper	src/key_mod/ecryptfs_key_mod_tspi.c	/^static struct key_mapper {$/;"	s	file:
key_mod	src/key_mod/ecryptfs_key_mod_openssl.c	/^	struct ecryptfs_key_mod *key_mod;$/;"	m	struct:ecryptfs_subgraph_ctx	typeref:struct:ecryptfs_subgraph_ctx::ecryptfs_key_mod	file:
key_mod	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^	struct ecryptfs_key_mod *key_mod;$/;"	m	struct:pkcs11h_subgraph_key_ctx	typeref:struct:pkcs11h_subgraph_key_ctx::ecryptfs_key_mod	file:
key_mod	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^	struct ecryptfs_key_mod *key_mod;$/;"	m	struct:pkcs11h_subgraph_provider_ctx	typeref:struct:pkcs11h_subgraph_provider_ctx::ecryptfs_key_mod	file:
key_mod	src/libecryptfs/decision_graph.c	/^	struct ecryptfs_key_mod *key_mod;$/;"	m	struct:ecryptfs_subgraph_ctx	typeref:struct:ecryptfs_subgraph_ctx::ecryptfs_key_mod	file:
key_mod_alias	src/include/ecryptfs.h	/^	char key_mod_alias[ECRYPTFS_MAX_KEY_MOD_NAME_BYTES + 1];$/;"	m	struct:ecryptfs_private_key
key_mod_decrypt	src/libecryptfs/packets.c	/^key_mod_decrypt(char **decrypted_key, size_t *decrypted_key_size,$/;"	f	file:
key_mod_encrypt	src/libecryptfs/packets.c	/^key_mod_encrypt(char **encrypted_key, size_t *encrypted_key_size,$/;"	f	file:
key_mod_gpg	src/key_mod/ecryptfs_key_mod_gpg.c	/^struct key_mod_gpg {$/;"	s	file:
key_mod_list_head	src/include/ecryptfs.h	/^	struct ecryptfs_key_mod key_mod_list_head;$/;"	m	struct:ecryptfs_ctx	typeref:struct:ecryptfs_ctx::ecryptfs_key_mod
key_mod_param	src/include/ecryptfs.h	/^struct key_mod_param {$/;"	s
key_mod_param_val	src/include/ecryptfs.h	/^struct key_mod_param_val {$/;"	s
key_module_select_node	src/libecryptfs/module_mgr.c	/^static struct param_node key_module_select_node = {$/;"	v	typeref:struct:param_node	file:
key_module_select_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node key_module_select_node_orig = {$/;"	v	typeref:struct:param_node	file:
key_perm_t	src/include/keyutils.h	/^typedef uint32_t key_perm_t;$/;"	t
key_serial_t	src/include/keyutils.h	/^typedef int32_t key_serial_t;$/;"	t
key_size	src/include/ecryptfs.h	/^	size_t key_size;$/;"	m	struct:ecryptfs_crypt_stat_user
key_size	src/include/ecryptfs.h	/^	uint32_t key_size;$/;"	m	struct:ecryptfs_private_key
keylist_idx	src/key_mod/ecryptfs_key_mod_gpg.c	/^	unsigned int keylist_idx;$/;"	m	struct:key_mod_gpg	file:
keysize_bytes	src/include/ecryptfs.h	/^	int keysize_bytes;$/;"	m	struct:cipher_str_name_map_elem
klass	src/libecryptfs-swig/libecryptfs_wrap.c	/^  PyObject *klass;$/;"	m	struct:__anon1	file:
lib_handle	src/include/ecryptfs.h	/^	void *lib_handle;$/;"	m	struct:ecryptfs_key_mod
lib_path	src/include/ecryptfs.h	/^	char *lib_path;$/;"	m	struct:ecryptfs_key_mod
libdir	src/pam_ecryptfs/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	src/utils/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	src/pam_ecryptfs/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	src/utils/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
library	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^	char *library;$/;"	m	struct:pkcs11h_subgraph_provider_ctx	file:
limit_key_size	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int limit_key_size(struct val_node **params, $/;"	f	file:
list_pid_sid_pairs	src/libecryptfs/main.c	/^static int list_pid_sid_pairs(int shm_id)$/;"	f	file:
loaded_cipher	src/include/ecryptfs.h	/^	uint8_t loaded_cipher;$/;"	m	struct:ecryptfs_cipher_elem
local_flag	src/libecryptfs/ecryptfs-stat.c	/^	uint32_t local_flag;$/;"	m	struct:ecryptfs_flag_map_elem	file:
localedir	src/pam_ecryptfs/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	src/utils/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	src/pam_ecryptfs/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	src/utils/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lock	src/key_mod/ecryptfs_key_mod_tspi.c	/^	pthread_mutex_t lock;$/;"	m	struct:ecryptfs_tspi_connect_ticket	file:
lock_counter	src/utils/mount.ecryptfs_private.c	/^FILE *lock_counter(char *u, int uid) {$/;"	f
lower_file	src/utils/test.c	/^		struct file *lower_file;$/;"	m	union:ecryptfs_page_crypt_context::__anon6	typeref:struct:ecryptfs_page_crypt_context::__anon6::file	file:
lower_page_idx	src/utils/test.c	/^	unsigned long lower_page_idx;$/;"	m	struct:translation_test_vector_element	file:
lower_size	src/utils/test.c	/^	unsigned long lower_size;$/;"	m	struct:upper_lower_test_vector_element	file:
lt_ECHO	src/pam_ecryptfs/Makefile	/^lt_ECHO = echo$/;"	m
lt_ECHO	src/utils/Makefile	/^lt_ECHO = echo$/;"	m
lvalue	src/libecryptfs-swig/libecryptfs_wrap.c	/^  long lvalue;$/;"	m	struct:swig_const_info	file:
main	src/daemon/main.c	/^int main(int argc, char **argv)$/;"	f
main	src/utils/ecryptfs-stat.c	/^int main(int argc, const char *argv[])$/;"	f
main	src/utils/ecryptfs_add_passphrase.c	/^int main(int argc, char *argv[])$/;"	f
main	src/utils/ecryptfs_generate_tpm_key.c	/^int main(int argc, char **argv)$/;"	f
main	src/utils/ecryptfs_insert_wrapped_passphrase_into_keyring.c	/^int main(int argc, char *argv[])$/;"	f
main	src/utils/ecryptfs_rewrap_passphrase.c	/^int main(int argc, char *argv[])$/;"	f
main	src/utils/ecryptfs_unwrap_passphrase.c	/^int main(int argc, char *argv[])$/;"	f
main	src/utils/ecryptfs_wrap_passphrase.c	/^int main(int argc, char *argv[])$/;"	f
main	src/utils/manager.c	/^int main(int argc, char **argv)$/;"	f
main	src/utils/mount.ecryptfs.c	/^int main(int argc, char **argv)$/;"	f
main	src/utils/mount.ecryptfs_private.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/utils/test.c	/^int main()$/;"	f
main	src/utils/umount.ecryptfs.c	/^int main(int argc, char **argv)$/;"	f
main_menu_enum	src/include/ecryptfs.h	/^enum main_menu_enum {$/;"	g
manager_menu	src/utils/io.c	/^int manager_menu(void)$/;"	f
mandir	src/pam_ecryptfs/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	src/utils/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mapper	src/key_mod/ecryptfs_key_mod_tspi.c	/^} *mapper = NULL;$/;"	v	typeref:struct:key_mapper	file:
max_keysize	src/include/ecryptfs.h	/^	uint32_t max_keysize;$/;"	m	struct:cipher_descriptor
max_keysize	src/libecryptfs/cipher_list.c	/^	uint32_t max_keysize;$/;"	m	struct:cipher_name_module_map	file:
mctx	src/daemon/main.c	/^struct ecryptfs_messaging_ctx mctx;$/;"	v	typeref:struct:ecryptfs_messaging_ctx
mctx_mux	src/daemon/main.c	/^pthread_mutex_t mctx_mux;$/;"	v
min_keysize	src/include/ecryptfs.h	/^	uint32_t min_keysize;$/;"	m	struct:cipher_descriptor
min_keysize	src/libecryptfs/cipher_list.c	/^	uint32_t min_keysize;$/;"	m	struct:cipher_name_module_map	file:
miscdev_ctx	src/include/ecryptfs.h	/^		struct ecryptfs_miscdev_ctx miscdev_ctx;$/;"	m	union:ecryptfs_messaging_ctx::__anon5	typeref:struct:ecryptfs_messaging_ctx::__anon5::ecryptfs_miscdev_ctx
miscdev_fd	src/include/ecryptfs.h	/^	int miscdev_fd;$/;"	m	struct:ecryptfs_miscdev_ctx
miscdev_filename	src/include/ecryptfs.h	/^	char *miscdev_filename;$/;"	m	struct:ecryptfs_miscdev_ctx
mkdir_p	src/pam_ecryptfs/Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkdir_p	src/utils/Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkinstalldirs	src/pam_ecryptfs/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	src/utils/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mnt_opt_names	src/include/decision_graph.h	/^        char *mnt_opt_names[MAX_NUM_MNT_OPT_NAMES];$/;"	m	struct:param_node
mode	src/utils/test.c	/^	int mode;$/;"	m	struct:ecryptfs_page_crypt_context	file:
module	src/libecryptfs/cipher_list.c	/^	char *module;$/;"	m	struct:cipher_name_module_map	file:
module_name	src/include/ecryptfs.h	/^	char *module_name;$/;"	m	struct:cipher_descriptor
mount_ecryptfs_CFLAGS	src/utils/Makefile	/^mount_ecryptfs_CFLAGS = $(AM_CFLAGS) $(KEYUTILS_CFLAGS) $(LIBGCRYPT_CFLAGS)$/;"	m
mount_ecryptfs_DEPENDENCIES	src/utils/Makefile	/^mount_ecryptfs_DEPENDENCIES =  \\$/;"	m
mount_ecryptfs_LDADD	src/utils/Makefile	/^mount_ecryptfs_LDADD = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la $(KEYUTILS_LIBS) $(LIBGCRYPT_LIBS)$/;"	m
mount_ecryptfs_LINK	src/utils/Makefile	/^mount_ecryptfs_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
mount_ecryptfs_OBJECTS	src/utils/Makefile	/^mount_ecryptfs_OBJECTS = $(am_mount_ecryptfs_OBJECTS)$/;"	m
mount_ecryptfs_SOURCES	src/utils/Makefile	/^mount_ecryptfs_SOURCES = mount.ecryptfs.c io.c io.h gen_key.c plaintext_decision_graph.c$/;"	m
mount_ecryptfs_private_DEPENDENCIES	src/utils/Makefile	/^mount_ecryptfs_private_DEPENDENCIES =  \\$/;"	m
mount_ecryptfs_private_LDADD	src/utils/Makefile	/^mount_ecryptfs_private_LDADD = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la $(KEYUTILS_LIBS)$/;"	m
mount_ecryptfs_private_OBJECTS	src/utils/Makefile	/^mount_ecryptfs_private_OBJECTS = $(am_mount_ecryptfs_private_OBJECTS)$/;"	m
mount_ecryptfs_private_SOURCES	src/utils/Makefile	/^mount_ecryptfs_private_SOURCES = mount.ecryptfs_private.c$/;"	m
mount_private_dir	src/pam_ecryptfs/pam_ecryptfs.c	/^static int mount_private_dir(pam_handle_t *pamh)$/;"	f	file:
munch_newline	src/utils/io.c	/^static inline int munch_newline(void)$/;"	f	file:
mygetchar	src/utils/io.c	/^int mygetchar(void)$/;"	f
name	src/include/ecryptfs.h	/^	char *name;$/;"	m	struct:ecryptfs_name_val_pair
name	src/key_mod/ecryptfs_key_mod_gpg.c	/^	char *name;$/;"	m	struct:pki_nvp_map_elem	file:
name	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^	char *name;$/;"	m	struct:pkcs11h_subgraph_provider_ctx	file:
name	src/libecryptfs-swig/libecryptfs_wrap.c	/^    char       *name;                  \/* Name of global variable *\/$/;"	m	struct:swig_globalvar	file:
name	src/libecryptfs-swig/libecryptfs_wrap.c	/^  char *name;$/;"	m	struct:swig_const_info	file:
name	src/libecryptfs-swig/libecryptfs_wrap.c	/^  const char             *name;			\/* mangled name of this type *\/$/;"	m	struct:swig_type_info	file:
name	src/libecryptfs/cipher_list.c	/^	char *name;$/;"	m	struct:cipher_name_module_map	file:
newargs	src/libecryptfs-swig/libecryptfs_wrap.c	/^  PyObject *newargs;$/;"	m	struct:__anon1	file:
newraw	src/libecryptfs-swig/libecryptfs_wrap.c	/^  PyObject *newraw;$/;"	m	struct:__anon1	file:
next	src/include/decision_graph.h	/^	struct prompt_elem *next;$/;"	m	struct:prompt_elem	typeref:struct:prompt_elem::prompt_elem
next	src/include/decision_graph.h	/^        struct val_node *next;$/;"	m	struct:val_node	typeref:struct:val_node::val_node
next	src/include/ecryptfs.h	/^	struct cipher_descriptor *next;$/;"	m	struct:cipher_descriptor	typeref:struct:cipher_descriptor::cipher_descriptor
next	src/include/ecryptfs.h	/^	struct ecryptfs_auth_tok_list *next;$/;"	m	struct:ecryptfs_auth_tok_list	typeref:struct:ecryptfs_auth_tok_list::ecryptfs_auth_tok_list
next	src/include/ecryptfs.h	/^	struct ecryptfs_cipher_elem *next;$/;"	m	struct:ecryptfs_cipher_elem	typeref:struct:ecryptfs_cipher_elem::ecryptfs_cipher_elem
next	src/include/ecryptfs.h	/^	struct ecryptfs_key_mod *next;$/;"	m	struct:ecryptfs_key_mod	typeref:struct:ecryptfs_key_mod::ecryptfs_key_mod
next	src/include/ecryptfs.h	/^	struct ecryptfs_name_val_pair *next;$/;"	m	struct:ecryptfs_name_val_pair	typeref:struct:ecryptfs_name_val_pair::ecryptfs_name_val_pair
next	src/key_mod/ecryptfs_key_mod_tspi.c	/^	struct ecryptfs_tspi_connect_ticket *next;$/;"	m	struct:ecryptfs_tspi_connect_ticket	typeref:struct:ecryptfs_tspi_connect_ticket::ecryptfs_tspi_connect_ticket	file:
next	src/key_mod/ecryptfs_key_mod_tspi.c	/^	struct key_mapper *next;$/;"	m	struct:key_mapper	typeref:struct:key_mapper::key_mapper	file:
next	src/libecryptfs-swig/libecryptfs_wrap.c	/^    struct swig_globalvar *next;$/;"	m	struct:swig_globalvar	typeref:struct:swig_globalvar::swig_globalvar	file:
next	src/libecryptfs-swig/libecryptfs_wrap.c	/^  PyObject *next;$/;"	m	struct:__anon2	file:
next	src/libecryptfs-swig/libecryptfs_wrap.c	/^  struct swig_cast_info  *next;			\/* pointer to next cast in linked list *\/$/;"	m	struct:swig_cast_info	typeref:struct:swig_cast_info::swig_cast_info	file:
next	src/libecryptfs-swig/libecryptfs_wrap.c	/^  struct swig_module_info *next;		\/* Pointer to next element in circularly linked list *\/$/;"	m	struct:swig_module_info	typeref:struct:swig_module_info::swig_module_info	file:
next_token	src/include/decision_graph.h	/^        struct param_node *next_token;$/;"	m	struct:transition_node	typeref:struct:transition_node::param_node
nl_ctx	src/include/ecryptfs.h	/^		struct ecryptfs_nl_ctx nl_ctx;$/;"	m	union:ecryptfs_messaging_ctx::__anon5	typeref:struct:ecryptfs_messaging_ctx::__anon5::ecryptfs_nl_ctx
noinst_PROGRAMS	src/utils/Makefile	/^noinst_PROGRAMS = test$(EXEEXT)$/;"	m
num_header_bytes_at_front	src/include/ecryptfs.h	/^	size_t num_header_bytes_at_front;$/;"	m	struct:ecryptfs_crypt_stat_user
num_header_extents_at_front	src/utils/test.c	/^	int num_header_extents_at_front;$/;"	m	struct:ecryptfs_crypt_stat	file:
num_header_extents_at_front	src/utils/test.c	/^	int num_header_extents_at_front;$/;"	m	struct:translation_test_vector_element	file:
num_header_extents_at_front	src/utils/test.c	/^	int num_header_extents_at_front;$/;"	m	struct:upper_lower_test_vector_element	file:
num_mnt_opt_names	src/include/decision_graph.h	/^        int num_mnt_opt_names;$/;"	m	struct:param_node
num_param_vals	src/include/ecryptfs.h	/^	uint32_t num_param_vals;$/;"	m	struct:ecryptfs_key_mod
num_pending	src/key_mod/ecryptfs_key_mod_tspi.c	/^	uint32_t num_pending;$/;"	m	struct:ecryptfs_tspi_connect_ticket	file:
num_transitions	src/include/decision_graph.h	/^        int num_transitions;$/;"	m	struct:param_node
nvp_flags_to_param_flags_map	src/libecryptfs/decision_graph.c	/^} nvp_flags_to_param_flags_map[] = {$/;"	v	typeref:struct:flag_map	file:
nvp_head	src/include/ecryptfs.h	/^	struct ecryptfs_name_val_pair *nvp_head;$/;"	m	struct:ecryptfs_ctx	typeref:struct:ecryptfs_ctx::ecryptfs_name_val_pair
oldincludedir	src/pam_ecryptfs/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	src/utils/Makefile	/^oldincludedir = \/usr\/include$/;"	m
openssl_data	src/key_mod/ecryptfs_key_mod_openssl.c	/^	struct openssl_data openssl_data;$/;"	m	struct:ecryptfs_subgraph_ctx	typeref:struct:ecryptfs_subgraph_ctx::openssl_data	file:
openssl_data	src/key_mod/ecryptfs_key_mod_openssl.c	/^struct openssl_data {$/;"	s	file:
openssl_gen_key_transition	src/key_mod/ecryptfs_key_mod_openssl.c	/^struct transition_node openssl_gen_key_transition = {$/;"	v	typeref:struct:transition_node
openssl_transition	src/key_mod/ecryptfs_key_mod_openssl.c	/^struct transition_node openssl_transition = {$/;"	v	typeref:struct:transition_node
ops	src/include/ecryptfs.h	/^	struct ecryptfs_key_mod_ops *ops;$/;"	m	struct:ecryptfs_key_mod	typeref:struct:ecryptfs_key_mod::ecryptfs_key_mod_ops
option	src/include/ecryptfs.h	/^	char *option;$/;"	m	struct:key_mod_param
opts_str_contains_option	src/utils/mount.ecryptfs.c	/^static int opts_str_contains_option(char *options, char *option)$/;"	f	file:
order	src/libecryptfs/module_mgr.c	/^	uint32_t order;$/;"	m	struct:supported_key_bytes	file:
own	src/libecryptfs-swig/libecryptfs_wrap.c	/^  int own;$/;"	m	struct:__anon2	file:
owndata	src/libecryptfs-swig/libecryptfs_wrap.c	/^  int                    owndata;		\/* flag if the structure owns the clientdata *\/$/;"	m	struct:swig_type_info	file:
pack	src/libecryptfs-swig/libecryptfs_wrap.c	/^  void *pack;$/;"	m	struct:__anon3	file:
page	src/utils/test.c	/^	struct page *page;$/;"	m	struct:ecryptfs_page_crypt_context	typeref:struct:ecryptfs_page_crypt_context::page	file:
page	src/utils/test.c	/^struct page {$/;"	s	file:
page_size	src/utils/test.c	/^	int page_size;$/;"	m	struct:translation_test_vector_element	file:
pam_ecryptfs_la_CFLAGS	src/pam_ecryptfs/Makefile	/^pam_ecryptfs_la_CFLAGS = $(AM_CFLAGS)$/;"	m
pam_ecryptfs_la_DEPENDENCIES	src/pam_ecryptfs/Makefile	/^pam_ecryptfs_la_DEPENDENCIES =  \\$/;"	m
pam_ecryptfs_la_LDFLAGS	src/pam_ecryptfs/Makefile	/^pam_ecryptfs_la_LDFLAGS = $(AM_LDFLAGS) -module -avoid-version -shared$/;"	m
pam_ecryptfs_la_LIBADD	src/pam_ecryptfs/Makefile	/^pam_ecryptfs_la_LIBADD = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la $(PAM_LIBS)$/;"	m
pam_ecryptfs_la_LINK	src/pam_ecryptfs/Makefile	/^pam_ecryptfs_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
pam_ecryptfs_la_OBJECTS	src/pam_ecryptfs/Makefile	/^pam_ecryptfs_la_OBJECTS = $(am_pam_ecryptfs_la_OBJECTS)$/;"	m
pam_ecryptfs_la_SOURCES	src/pam_ecryptfs/Makefile	/^pam_ecryptfs_la_SOURCES = pam_ecryptfs.c$/;"	m
pam_sm_authenticate	src/pam_ecryptfs/pam_ecryptfs.c	/^PAM_EXTERN int pam_sm_authenticate(pam_handle_t *pamh, int flags, int argc,$/;"	f
pam_sm_chauthtok	src/pam_ecryptfs/pam_ecryptfs.c	/^PAM_EXTERN int pam_sm_chauthtok(pam_handle_t * pamh, int flags,$/;"	f
pam_sm_close_session	src/pam_ecryptfs/pam_ecryptfs.c	/^pam_sm_close_session(pam_handle_t *pamh, int flags,$/;"	f
pam_sm_open_session	src/pam_ecryptfs/pam_ecryptfs.c	/^pam_sm_open_session(pam_handle_t *pamh, int flags,$/;"	f
pam_sm_setcred	src/pam_ecryptfs/pam_ecryptfs.c	/^PAM_EXTERN int pam_sm_setcred(pam_handle_t *pamh, int flags, int argc,$/;"	f
pamdir	src/pam_ecryptfs/Makefile	/^pamdir = $(libdir)\/security$/;"	m
pamdir	src/utils/Makefile	/^pamdir = $(libdir)\/security$/;"	m
pamlibdir	src/pam_ecryptfs/Makefile	/^pamlibdir = $/;"	m
pamlibdir	src/utils/Makefile	/^pamlibdir = $/;"	m
param	src/utils/test.c	/^	} param;$/;"	m	struct:ecryptfs_page_crypt_context	typeref:union:ecryptfs_page_crypt_context::__anon6	file:
param_node	src/include/decision_graph.h	/^struct param_node {$/;"	s
param_node_set_default	src/libecryptfs/module_mgr.c	/^static void param_node_set_default (struct param_node *node, struct param_node *default_node)$/;"	f	file:
param_vals	src/include/ecryptfs.h	/^	struct key_mod_param_val *param_vals;$/;"	m	struct:ecryptfs_key_mod	typeref:struct:ecryptfs_key_mod::key_mod_param_val
parameter_should_be_scrubbed	src/utils/mount.ecryptfs.c	/^static int parameter_should_be_scrubbed(char *str)$/;"	f	file:
parameter_should_not_be_scrubbed	src/utils/mount.ecryptfs.c	/^static int parameter_should_not_be_scrubbed(char *str) {$/;"	f	file:
parameters_to_not_scrub	src/utils/mount.ecryptfs.c	/^char *parameters_to_not_scrub[] = {$/;"	v
parameters_to_scrub	src/utils/mount.ecryptfs.c	/^char *parameters_to_scrub[] = {$/;"	v
parent	src/include/ecryptfs.h	/^	struct ecryptfs_name_val_pair *parent;$/;"	m	struct:ecryptfs_name_val_pair	typeref:struct:ecryptfs_name_val_pair::ecryptfs_name_val_pair
parse_arguments	src/utils/mount.ecryptfs.c	/^static int parse_arguments(int argc, char **argv, char **src, char **target,$/;"	f	file:
parse_options_file	src/libecryptfs/cmd_ln_parser.c	/^int parse_options_file(int fd, struct ecryptfs_name_val_pair *head)$/;"	f
parse_packet	src/libecryptfs/packets.c	/^int parse_packet(struct ecryptfs_ctx *ctx,$/;"	f
passphrase	src/key_mod/ecryptfs_key_mod_openssl.c	/^	char *passphrase;$/;"	m	struct:openssl_data	file:
passphrase	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^	char *passphrase;$/;"	m	struct:pkcs11h_data	file:
passphrase_get_key_mod_ops	src/key_mod/ecryptfs_key_mod_passphrase.c	/^struct ecryptfs_key_mod_ops *passphrase_get_key_mod_ops(void)$/;"	f
passphrase_param_nodes	src/key_mod/ecryptfs_key_mod_passphrase.c	/^struct param_node passphrase_param_nodes[] = {$/;"	v	typeref:struct:param_node
passphrase_transition	src/key_mod/ecryptfs_key_mod_passphrase.c	/^struct transition_node passphrase_transition = {$/;"	v	typeref:struct:transition_node
passthrough_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node passthrough_param_node = {$/;"	v	typeref:struct:param_node	file:
passthrough_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node passthrough_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
password	src/include/ecryptfs.h	/^		struct ecryptfs_password password;$/;"	m	union:ecryptfs_auth_tok::__anon4	typeref:struct:ecryptfs_auth_tok::__anon4::ecryptfs_password
password_bytes	src/include/ecryptfs.h	/^	int32_t password_bytes;$/;"	m	struct:ecryptfs_password
path	src/key_mod/ecryptfs_key_mod_openssl.c	/^	char *path;$/;"	m	struct:openssl_data	file:
pdfdir	src/pam_ecryptfs/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	src/utils/Makefile	/^pdfdir = ${docdir}$/;"	m
pidfile	src/daemon/main.c	/^static char *pidfile = NULL;$/;"	v	file:
pkcs11h_data	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^	struct pkcs11h_data pkcs11h_data;$/;"	m	struct:pkcs11h_subgraph_key_ctx	typeref:struct:pkcs11h_subgraph_key_ctx::pkcs11h_data	file:
pkcs11h_data	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^struct pkcs11h_data {$/;"	s	file:
pkcs11h_get_id_list	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int pkcs11h_get_id_list (char **list) {$/;"	f	file:
pkcs11h_global_param_nodes	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static struct param_node pkcs11h_global_param_nodes[] = {$/;"	v	typeref:struct:param_node	file:
pkcs11h_key_param_nodes	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static struct param_node pkcs11h_key_param_nodes[] = {$/;"	v	typeref:struct:param_node	file:
pkcs11h_key_transition	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^struct transition_node pkcs11h_key_transition = {$/;"	v	typeref:struct:transition_node
pkcs11h_log	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^pkcs11h_log ($/;"	f	file:
pkcs11h_pin_prompt	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^pkcs11h_pin_prompt ($/;"	f	file:
pkcs11h_provider_param_nodes	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static struct param_node pkcs11h_provider_param_nodes[] = {$/;"	v	typeref:struct:param_node	file:
pkcs11h_subgraph_key_ctx	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^struct pkcs11h_subgraph_key_ctx {$/;"	s	file:
pkcs11h_subgraph_provider_ctx	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^struct pkcs11h_subgraph_provider_ctx {$/;"	s	file:
pkcs11h_token_prompt	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^pkcs11h_token_prompt ($/;"	f	file:
pkgconfigdir	src/pam_ecryptfs/Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgconfigdir	src/utils/Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgdatadir	src/pam_ecryptfs/Makefile	/^pkgdatadir = $(datadir)\/ecryptfs-utils$/;"	m
pkgdatadir	src/utils/Makefile	/^pkgdatadir = $(datadir)\/ecryptfs-utils$/;"	m
pkgincludedir	src/pam_ecryptfs/Makefile	/^pkgincludedir = $(includedir)\/ecryptfs-utils$/;"	m
pkgincludedir	src/utils/Makefile	/^pkgincludedir = $(includedir)\/ecryptfs-utils$/;"	m
pkglibdir	src/pam_ecryptfs/Makefile	/^pkglibdir = $(libdir)\/ecryptfs-utils$/;"	m
pkglibdir	src/utils/Makefile	/^pkglibdir = $(libdir)\/ecryptfs-utils$/;"	m
pkglibexecdir	src/pam_ecryptfs/Makefile	/^pkglibexecdir = $(libexecdir)\/ecryptfs-utils$/;"	m
pkglibexecdir	src/utils/Makefile	/^pkglibexecdir = $(libexecdir)\/ecryptfs-utils$/;"	m
pkgpyexecdir	src/pam_ecryptfs/Makefile	/^pkgpyexecdir = ${pyexecdir}\/ecryptfs-utils$/;"	m
pkgpyexecdir	src/utils/Makefile	/^pkgpyexecdir = ${pyexecdir}\/ecryptfs-utils$/;"	m
pkgpythondir	src/pam_ecryptfs/Makefile	/^pkgpythondir = ${pythondir}\/ecryptfs-utils$/;"	m
pkgpythondir	src/utils/Makefile	/^pkgpythondir = ${pythondir}\/ecryptfs-utils$/;"	m
pki_nvp_map	src/key_mod/ecryptfs_key_mod_gpg.c	/^static struct pki_nvp_map_elem pki_nvp_map[] = {$/;"	v	typeref:struct:pki_nvp_map_elem	file:
pki_nvp_map_elem	src/key_mod/ecryptfs_key_mod_gpg.c	/^struct pki_nvp_map_elem {$/;"	s	file:
plaintext_arr	src/utils/plaintext_decision_graph.c	/^struct param_node plaintext_arr[] = {$/;"	v	typeref:struct:param_node
prefix	src/pam_ecryptfs/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	src/utils/Makefile	/^prefix = \/usr\/local$/;"	m
pretty_val	src/include/decision_graph.h	/^        char *pretty_val;$/;"	m	struct:transition_node
prev	src/libecryptfs-swig/libecryptfs_wrap.c	/^  struct swig_cast_info  *prev;			\/* pointer to the previous cast *\/$/;"	m	struct:swig_cast_info	typeref:struct:swig_cast_info::swig_cast_info	file:
print_hex	src/key_mod/ecryptfs_key_mod_tspi.c	/^print_hex(BYTE *buf, uint32_t len)$/;"	f	file:
print_nvp_list	src/libecryptfs/cmd_ln_parser.c	/^int print_nvp_list(struct ecryptfs_name_val_pair *dst)$/;"	f
print_whitespace	src/libecryptfs/decision_graph.c	/^static void print_whitespace(FILE *file_stream, int depth)$/;"	f	file:
priority	src/include/ecryptfs.h	/^	uint32_t priority;$/;"	m	struct:cipher_descriptor
priority	src/libecryptfs/cipher_list.c	/^	uint32_t priority;$/;"	m	struct:cipher_name_module_map	file:
private_dir	src/pam_ecryptfs/pam_ecryptfs.c	/^static int private_dir(pam_handle_t *pamh, int mount)$/;"	f	file:
private_key	src/include/ecryptfs.h	/^		struct ecryptfs_private_key private_key;$/;"	m	union:ecryptfs_auth_tok::__anon4	typeref:struct:ecryptfs_auth_tok::__anon4::ecryptfs_private_key
private_mask	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^	unsigned private_mask;$/;"	m	struct:pkcs11h_subgraph_provider_ctx	file:
process_comma_tok	src/libecryptfs/cmd_ln_parser.c	/^int process_comma_tok(struct ecryptfs_name_val_pair **current, char *tok,$/;"	f
process_sig	src/utils/mount.ecryptfs.c	/^static int process_sig(char *auth_tok_sig, struct passwd *pw)$/;"	f	file:
program_transform_name	src/pam_ecryptfs/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	src/utils/Makefile	/^program_transform_name = s,x,x,$/;"	m
prompt	src/include/decision_graph.h	/^        char *prompt;$/;"	m	struct:param_node
prompt	src/include/ecryptfs.h	/^	int (*prompt)(char *prompt_type, char *prompt, char *input,$/;"	m	struct:ecryptfs_ctx_ops
prompt_callback	src/daemon/main.c	/^prompt_callback(char *prompt_type, char *prompt, char *input, int input_size) {$/;"	f	file:
prompt_elem	src/include/decision_graph.h	/^struct prompt_elem {$/;"	s
prompt_prog	src/daemon/main.c	/^static char *prompt_prog = NULL;$/;"	v	file:
psdir	src/pam_ecryptfs/Makefile	/^psdir = ${docdir}$/;"	m
psdir	src/utils/Makefile	/^psdir = ${docdir}$/;"	m
ptr	src/libecryptfs-swig/libecryptfs_wrap.c	/^  void *ptr;$/;"	m	struct:__anon2	file:
ptr_to_auth_tok_list_head	src/include/ecryptfs.h	/^	struct ecryptfs_auth_tok_list *ptr_to_auth_tok_list_head;$/;"	m	struct:ecryptfs_crypt_stat_user	typeref:struct:ecryptfs_crypt_stat_user::ecryptfs_auth_tok_list
ptr_to_free_ticket_list_head	src/key_mod/ecryptfs_key_mod_tspi.c	/^static struct ecryptfs_tspi_connect_ticket *ptr_to_free_ticket_list_head = NULL;$/;"	v	typeref:struct:ecryptfs_tspi_connect_ticket	file:
ptr_to_used_ticket_list_head	src/key_mod/ecryptfs_key_mod_tspi.c	/^static struct ecryptfs_tspi_connect_ticket *ptr_to_used_ticket_list_head = NULL;$/;"	v	typeref:struct:ecryptfs_tspi_connect_ticket	file:
ptype	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_type_info **ptype;$/;"	m	struct:swig_const_info	file:
pvalue	src/libecryptfs-swig/libecryptfs_wrap.c	/^  void   *pvalue;$/;"	m	struct:swig_const_info	file:
pyexecdir	src/pam_ecryptfs/Makefile	/^pyexecdir = ${exec_prefix}\/lib\/python2.6\/dist-packages$/;"	m
pyexecdir	src/utils/Makefile	/^pyexecdir = ${exec_prefix}\/lib\/python2.6\/dist-packages$/;"	m
pythondir	src/pam_ecryptfs/Makefile	/^pythondir = ${prefix}\/lib\/python2.6\/dist-packages$/;"	m
pythondir	src/utils/Makefile	/^pythondir = ${prefix}\/lib\/python2.6\/dist-packages$/;"	m
read_passphrase_salt	src/utils/io.c	/^int read_passphrase_salt(char *pass, char *salt)$/;"	f
remove_pid_for_this_sid	src/libecryptfs/main.c	/^static int remove_pid_for_this_sid(int shm_id)$/;"	f	file:
required_mount_opts	src/utils/mount.ecryptfs.c	/^char *required_mount_opts[] = {$/;"	v
reserved	src/include/ecryptfs.h	/^	uint8_t reserved[32];$/;"	m	struct:ecryptfs_auth_tok
retrieve_val	src/libecryptfs/decision_graph.c	/^static int retrieve_val(int *value_retrieved,$/;"	f	file:
root_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node root_param_node = {$/;"	v	typeref:struct:param_node	file:
root_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node root_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
rootsbin_PROGRAMS	src/utils/Makefile	/^rootsbin_PROGRAMS = mount.ecryptfs$(EXEEXT) umount.ecryptfs$(EXEEXT) \\$/;"	m
rootsbindir	src/pam_ecryptfs/Makefile	/^rootsbindir = $(sbindir)$/;"	m
rootsbindir	src/utils/Makefile	/^rootsbindir = $(sbindir)$/;"	m
salt	src/include/ecryptfs.h	/^	uint8_t salt[ECRYPTFS_SALT_SIZE];$/;"	m	struct:ecryptfs_password
sbindir	src/pam_ecryptfs/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	src/utils/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
serialize_key_module_data	src/key_mod/ecryptfs_key_mod_gpg.c	/^static int serialize_key_module_data(unsigned char *blob,$/;"	f	file:
serialized_id	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^	char *serialized_id;$/;"	m	struct:pkcs11h_data	file:
session_key	src/include/ecryptfs.h	/^	struct ecryptfs_session_key session_key;$/;"	m	struct:ecryptfs_auth_tok	typeref:struct:ecryptfs_auth_tok::ecryptfs_session_key
session_key_encryption_key	src/include/ecryptfs.h	/^	uint8_t session_key_encryption_key[ECRYPTFS_MAX_KEY_BYTES];$/;"	m	struct:ecryptfs_password
session_key_encryption_key_bytes	src/include/ecryptfs.h	/^	int32_t session_key_encryption_key_bytes;$/;"	m	struct:ecryptfs_password
set_attr	src/libecryptfs-swig/libecryptfs_wrap.c	/^    int       (*set_attr)(PyObject *); \/* Set the value *\/$/;"	m	struct:swig_globalvar	file:
set_exit_param_node_for_arr	src/libecryptfs/decision_graph.c	/^int set_exit_param_node_for_arr(struct param_node param_node_arr[],$/;"	f
set_exit_param_node_for_node	src/libecryptfs/decision_graph.c	/^int set_exit_param_node_for_node(struct param_node *param_node,$/;"	f
sharedstatedir	src/pam_ecryptfs/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	src/utils/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sig	src/key_mod/ecryptfs_key_mod_gpg.c	/^	char *sig;$/;"	m	struct:key_mod_gpg	file:
sig_param_node_callback	src/libecryptfs/module_mgr.c	/^sig_param_node_callback(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
signature	src/include/ecryptfs.h	/^	uint8_t signature[ECRYPTFS_PASSWORD_SIG_SIZE + 1];$/;"	m	struct:ecryptfs_password
signature	src/include/ecryptfs.h	/^	uint8_t signature[ECRYPTFS_PASSWORD_SIG_SIZE + 1];$/;"	m	struct:ecryptfs_private_key
sigterm_handler	src/daemon/main.c	/^void sigterm_handler(int sig)$/;"	f
size	src/include/ecryptfs.h	/^	int size;$/;"	m	struct:binary_data
size	src/libecryptfs-swig/libecryptfs_wrap.c	/^  size_t                 size;		        \/* Number of types in this module *\/$/;"	m	struct:swig_module_info	file:
size	src/libecryptfs-swig/libecryptfs_wrap.c	/^  size_t size;$/;"	m	struct:__anon3	file:
socket_fd	src/include/ecryptfs.h	/^	int socket_fd;$/;"	m	struct:ecryptfs_nl_ctx
socket_file_full_path	src/include/ecryptfs.h	/^	char socket_file_full_path[PATH_MAX];$/;"	m	struct:ecryptfs_daemon_info
srcdir	src/pam_ecryptfs/Makefile	/^srcdir = .$/;"	m
srcdir	src/utils/Makefile	/^srcdir = .$/;"	m
ssl_param_nodes	src/key_mod/ecryptfs_key_mod_openssl.c	/^static struct param_node ssl_param_nodes[] = {$/;"	v	typeref:struct:param_node	file:
stack_pop	src/libecryptfs/decision_graph.c	/^int stack_pop(struct val_node **head)$/;"	f
stack_pop_val	src/libecryptfs/decision_graph.c	/^int stack_pop_val(struct val_node **head, void **val)$/;"	f
stack_push	src/libecryptfs/decision_graph.c	/^int stack_push(struct val_node **head, void *val)$/;"	f
stack_push_if_yes	src/libecryptfs/module_mgr.c	/^static int stack_push_if_yes(struct param_node *node, struct val_node **head,$/;"	f	file:
state	src/include/ecryptfs.h	/^	uint32_t state;$/;"	m	struct:ecryptfs_messaging_ctx
str	src/include/decision_graph.h	/^	char *str;$/;"	m	struct:prompt_elem
str	src/libecryptfs-swig/libecryptfs_wrap.c	/^  const char             *str;			\/* human readable name of this type *\/$/;"	m	struct:swig_type_info	file:
str	src/libecryptfs/sysfs.c	/^	char *str;$/;"	m	struct:ecryptfs_version_str_map_elem	file:
string_to_uuid	src/key_mod/ecryptfs_key_mod_tspi.c	/^static void string_to_uuid(TSS_UUID *uuid, char *str)$/;"	f	file:
strip_userland_opts	src/utils/mount.ecryptfs.c	/^static int strip_userland_opts(char *options)$/;"	f	file:
subdir	src/pam_ecryptfs/Makefile	/^subdir = src\/pam_ecryptfs$/;"	m
subdir	src/utils/Makefile	/^subdir = src\/utils$/;"	m
suggested_val	src/include/decision_graph.h	/^        char *suggested_val;$/;"	m	struct:param_node
suggested_val	src/include/ecryptfs.h	/^	char *suggested_val;$/;"	m	struct:key_mod_param
supported_key_bytes	src/libecryptfs/module_mgr.c	/^static struct supported_key_bytes {$/;"	s	file:
supported_key_bytes	src/libecryptfs/module_mgr.c	/^} supported_key_bytes[] = {$/;"	v	typeref:struct:supported_key_bytes	file:
swab64	src/libecryptfs/ecryptfs-stat.c	/^static uint64_t swab64(uint64_t x)$/;"	f	file:
swig_cast_info	src/libecryptfs-swig/libecryptfs_wrap.c	/^typedef struct swig_cast_info {$/;"	s	file:
swig_cast_info	src/libecryptfs-swig/libecryptfs_wrap.c	/^} swig_cast_info;$/;"	t	typeref:struct:swig_cast_info	file:
swig_cast_initial	src/libecryptfs-swig/libecryptfs_wrap.c	/^static swig_cast_info *swig_cast_initial[] = {$/;"	v	file:
swig_const_info	src/libecryptfs-swig/libecryptfs_wrap.c	/^typedef struct swig_const_info {$/;"	s	file:
swig_const_info	src/libecryptfs-swig/libecryptfs_wrap.c	/^} swig_const_info;$/;"	t	typeref:struct:swig_const_info	file:
swig_const_table	src/libecryptfs-swig/libecryptfs_wrap.c	/^static swig_const_info swig_const_table[] = {$/;"	v	file:
swig_converter_func	src/libecryptfs-swig/libecryptfs_wrap.c	/^typedef void *(*swig_converter_func)(void *, int *);$/;"	t	file:
swig_dycast_func	src/libecryptfs-swig/libecryptfs_wrap.c	/^typedef struct swig_type_info *(*swig_dycast_func)(void **);$/;"	t	typeref:struct:swig_dycast_func	file:
swig_globalvar	src/libecryptfs-swig/libecryptfs_wrap.c	/^  typedef struct swig_globalvar {$/;"	s	file:
swig_globalvar	src/libecryptfs-swig/libecryptfs_wrap.c	/^  } swig_globalvar;$/;"	t	typeref:struct:swig_globalvar	file:
swig_module	src/libecryptfs-swig/libecryptfs_wrap.c	/^static swig_module_info swig_module = {swig_types, 1, 0, 0, 0, 0};$/;"	v	file:
swig_module_info	src/libecryptfs-swig/libecryptfs_wrap.c	/^typedef struct swig_module_info {$/;"	s	file:
swig_module_info	src/libecryptfs-swig/libecryptfs_wrap.c	/^} swig_module_info;$/;"	t	typeref:struct:swig_module_info	file:
swig_owntype	src/libecryptfs-swig/libecryptfs_wrap.c	997;"	d	file:
swig_type_info	src/libecryptfs-swig/libecryptfs_wrap.c	/^typedef struct swig_type_info {$/;"	s	file:
swig_type_info	src/libecryptfs-swig/libecryptfs_wrap.c	/^} swig_type_info;$/;"	t	typeref:struct:swig_type_info	file:
swig_type_initial	src/libecryptfs-swig/libecryptfs_wrap.c	/^static swig_type_info *swig_type_initial[] = {$/;"	v	file:
swig_types	src/libecryptfs-swig/libecryptfs_wrap.c	/^static swig_type_info *swig_types[2];$/;"	v	file:
swig_varlink_dealloc	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_varlink_dealloc(swig_varlinkobject *v) {$/;"	f
swig_varlink_getattr	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_varlink_getattr(swig_varlinkobject *v, char *n) {$/;"	f
swig_varlink_print	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {$/;"	f
swig_varlink_setattr	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {$/;"	f
swig_varlink_str	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_varlink_str(swig_varlinkobject *v) {$/;"	f
swig_varlink_type	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_varlink_type(void) {$/;"	f
swig_varlinkobject	src/libecryptfs-swig/libecryptfs_wrap.c	/^  typedef struct swig_varlinkobject {$/;"	s	file:
swig_varlinkobject	src/libecryptfs-swig/libecryptfs_wrap.c	/^  } swig_varlinkobject;$/;"	t	typeref:struct:swig_varlinkobject	file:
swigobject_methods	src/libecryptfs-swig/libecryptfs_wrap.c	/^swigobject_methods[] = {$/;"	v	file:
sysconfdir	src/pam_ecryptfs/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	src/utils/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
target	src/pam_ecryptfs/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target	src/utils/Makefile	/^target = i686-pc-linux-gnu$/;"	m
target_alias	src/pam_ecryptfs/Makefile	/^target_alias = $/;"	m
target_alias	src/utils/Makefile	/^target_alias = $/;"	m
target_cpu	src/pam_ecryptfs/Makefile	/^target_cpu = i686$/;"	m
target_cpu	src/utils/Makefile	/^target_cpu = i686$/;"	m
target_os	src/pam_ecryptfs/Makefile	/^target_os = linux-gnu$/;"	m
target_os	src/utils/Makefile	/^target_os = linux-gnu$/;"	m
target_triplet	src/pam_ecryptfs/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_triplet	src/utils/Makefile	/^target_triplet = i686-pc-linux-gnu$/;"	m
target_vendor	src/pam_ecryptfs/Makefile	/^target_vendor = pc$/;"	m
target_vendor	src/utils/Makefile	/^target_vendor = pc$/;"	m
test_DEPENDENCIES	src/utils/Makefile	/^test_DEPENDENCIES = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la$/;"	m
test_LDADD	src/utils/Makefile	/^test_LDADD = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la$/;"	m
test_OBJECTS	src/utils/Makefile	/^test_OBJECTS = $(am_test_OBJECTS)$/;"	m
test_SOURCES	src/utils/Makefile	/^test_SOURCES = test.c io.c$/;"	m
test_encrypt	src/utils/test.c	/^int test_encrypt(void)$/;"	f
test_extent_translation	src/utils/test.c	/^int test_extent_translation(void)$/;"	f
test_nv_list_from_file	src/utils/test.c	/^int test_nv_list_from_file(void)$/;"	f
test_upper_size_to_lower_size	src/utils/test.c	/^int test_upper_size_to_lower_size(void)$/;"	f
tf_ecryptfs_cipher	src/libecryptfs/module_mgr.c	/^static int tf_ecryptfs_cipher(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_ecryptfs_key_bytes	src/libecryptfs/module_mgr.c	/^static int tf_ecryptfs_key_bytes(struct ecryptfs_ctx *ctx,$/;"	f	file:
tf_ecryptfs_openssl_gen_key_param_node_keyfile	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int tf_ecryptfs_openssl_gen_key_param_node_keyfile($/;"	f	file:
tf_ecryptfs_openssl_gen_key_param_node_passphrase	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int tf_ecryptfs_openssl_gen_key_param_node_passphrase($/;"	f	file:
tf_ecryptfs_pkcs11h_destroy_subgraph_key_ctx	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^tf_ecryptfs_pkcs11h_destroy_subgraph_key_ctx(struct pkcs11h_subgraph_key_ctx *ctx)$/;"	f	file:
tf_ecryptfs_pkcs11h_destroy_subgraph_provider_ctx	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^tf_ecryptfs_pkcs11h_destroy_subgraph_provider_ctx(struct pkcs11h_subgraph_provider_ctx *ctx)$/;"	f	file:
tf_gpg_enter	src/key_mod/ecryptfs_key_mod_gpg.c	/^static int tf_gpg_enter(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_gpg_exit	src/key_mod/ecryptfs_key_mod_gpg.c	/^static int tf_gpg_exit(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_gpg_keysig	src/key_mod/ecryptfs_key_mod_gpg.c	/^static int tf_gpg_keysig(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_openssl_enter	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int tf_openssl_enter(struct ecryptfs_ctx *ctx,$/;"	f	file:
tf_pass_file	src/key_mod/ecryptfs_key_mod_passphrase.c	/^static int tf_pass_file(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_passwd	src/key_mod/ecryptfs_key_mod_passphrase.c	/^static int tf_passwd(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_pkcs11h_global_loglevel	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_global_loglevel(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_pkcs11h_global_pincache	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_global_pincache(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_pkcs11h_key_enter	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_key_enter(struct ecryptfs_ctx *ctx,$/;"	f	file:
tf_pkcs11h_key_id	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_key_id(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_pkcs11h_key_passwd	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_key_passwd(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_pkcs11h_key_x509file	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_key_x509file(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_pkcs11h_provider	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_provider(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_pkcs11h_provider_cert_private	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_provider_cert_private(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_pkcs11h_provider_end	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_provider_end(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_pkcs11h_provider_library	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_provider_library(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_pkcs11h_provider_name	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_provider_name(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_pkcs11h_provider_private_mask	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_provider_private_mask(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_pkcs11h_provider_prot_auth	src/key_mod/ecryptfs_key_mod_pkcs11_helper.c	/^static int tf_pkcs11h_provider_prot_auth(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_salt	src/key_mod/ecryptfs_key_mod_passphrase.c	/^static int tf_salt(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_ssl_keyfile	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int tf_ssl_keyfile(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_ssl_passwd	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int tf_ssl_passwd(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_ssl_passwd_fd	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int tf_ssl_passwd_fd(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tf_ssl_passwd_file	src/key_mod/ecryptfs_key_mod_openssl.c	/^static int tf_ssl_passwd_file(struct ecryptfs_ctx *ctx, struct param_node *node,$/;"	f	file:
tl	src/include/decision_graph.h	/^        struct transition_node tl[MAX_NUM_TRANSITIONS];$/;"	m	struct:param_node	typeref:struct:param_node::transition_node
to_hex	src/libecryptfs/main.c	/^inline void to_hex(char *dst, char *src, int src_size)$/;"	f
token	src/include/ecryptfs.h	/^	} token;$/;"	m	struct:ecryptfs_auth_tok	typeref:union:ecryptfs_auth_tok::__anon4
token_type	src/include/ecryptfs.h	/^	uint16_t token_type;$/;"	m	struct:ecryptfs_auth_tok
top_build_prefix	src/pam_ecryptfs/Makefile	/^top_build_prefix = ..\/..\/$/;"	m
top_build_prefix	src/utils/Makefile	/^top_build_prefix = ..\/..\/$/;"	m
top_builddir	src/pam_ecryptfs/Makefile	/^top_builddir = ..\/..$/;"	m
top_builddir	src/utils/Makefile	/^top_builddir = ..\/..$/;"	m
top_srcdir	src/pam_ecryptfs/Makefile	/^top_srcdir = ..\/..$/;"	m
top_srcdir	src/utils/Makefile	/^top_srcdir = ..\/..$/;"	m
trans_func	src/include/decision_graph.h	/^        int (*trans_func)(struct ecryptfs_ctx *, struct param_node *,$/;"	m	struct:transition_node
trans_into_mod_key_gen_subgraph	src/include/ecryptfs.h	/^	struct transition_node *trans_into_mod_key_gen_subgraph;$/;"	m	struct:ecryptfs_key_mod	typeref:struct:ecryptfs_key_mod::transition_node
trans_into_mod_subgraph	src/include/ecryptfs.h	/^	struct transition_node *trans_into_mod_subgraph;$/;"	m	struct:ecryptfs_key_mod	typeref:struct:ecryptfs_key_mod::transition_node
transform	src/pam_ecryptfs/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	src/utils/Makefile	/^transform = $(program_transform_name)$/;"	m
transition_node	src/include/decision_graph.h	/^struct transition_node {$/;"	s
translation_test_vector	src/utils/test.c	/^struct translation_test_vector_element translation_test_vector[] = {$/;"	v	typeref:struct:translation_test_vector_element
translation_test_vector_element	src/utils/test.c	/^struct translation_test_vector_element {$/;"	s	file:
tspi_ctx	src/key_mod/ecryptfs_key_mod_tspi.c	/^	TSS_HCONTEXT tspi_ctx;$/;"	m	struct:ecryptfs_tspi_connect_ticket	file:
tspi_data	src/key_mod/ecryptfs_key_mod_tspi.c	/^struct tspi_data {$/;"	s	file:
tspi_num_params	src/key_mod/ecryptfs_key_mod_tspi.c	/^static uint32_t tspi_num_params = 1;$/;"	v	file:
tspi_params	src/key_mod/ecryptfs_key_mod_tspi.c	/^static struct key_mod_param tspi_params[] = {$/;"	v	typeref:struct:key_mod_param	file:
ty	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_type_info *ty;$/;"	m	struct:__anon2	file:
ty	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_type_info *ty;$/;"	m	struct:__anon3	file:
type	src/include/ecryptfs.h	/^	uint32_t type;$/;"	m	struct:ecryptfs_messaging_ctx
type	src/libecryptfs-swig/libecryptfs_wrap.c	/^  int type;$/;"	m	struct:swig_const_info	file:
type	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_type_info         *type;			\/* pointer to type that is equivalent to this type *\/$/;"	m	struct:swig_cast_info	file:
type_initial	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_type_info         **type_initial;	\/* Array of initially generated type structures *\/$/;"	m	struct:swig_module_info	file:
types	src/libecryptfs-swig/libecryptfs_wrap.c	/^  swig_type_info         **types;		\/* Array of pointers to swig_type_info structures that are in this module *\/$/;"	m	struct:swig_module_info	file:
umount_ecryptfs_CFLAGS	src/utils/Makefile	/^umount_ecryptfs_CFLAGS = $(AM_CFLAGS) $(KEYUTILS_CFLAGS)$/;"	m
umount_ecryptfs_DEPENDENCIES	src/utils/Makefile	/^umount_ecryptfs_DEPENDENCIES =  \\$/;"	m
umount_ecryptfs_LDADD	src/utils/Makefile	/^umount_ecryptfs_LDADD = $(top_builddir)\/src\/libecryptfs\/libecryptfs.la$/;"	m
umount_ecryptfs_LINK	src/utils/Makefile	/^umount_ecryptfs_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
umount_ecryptfs_OBJECTS	src/utils/Makefile	/^umount_ecryptfs_OBJECTS = $(am_umount_ecryptfs_OBJECTS)$/;"	m
umount_ecryptfs_SOURCES	src/utils/Makefile	/^umount_ecryptfs_SOURCES = umount.ecryptfs.c$/;"	m
umount_private_dir	src/pam_ecryptfs/pam_ecryptfs.c	/^static int umount_private_dir(pam_handle_t *pamh)$/;"	f	file:
unlink_keys_from_keyring	src/utils/umount.ecryptfs.c	/^static int unlink_keys_from_keyring(const char *mnt_point)$/;"	f	file:
unlock_counter	src/utils/mount.ecryptfs_private.c	/^void unlock_counter(FILE *fh) {$/;"	f
update_mtab	src/utils/mount.ecryptfs_private.c	/^int update_mtab(char *dev, char *mnt, char *opt) {$/;"	f
upper_lower_test_vector	src/utils/test.c	/^struct upper_lower_test_vector_element upper_lower_test_vector[] = {$/;"	v	typeref:struct:upper_lower_test_vector_element
upper_lower_test_vector_element	src/utils/test.c	/^struct upper_lower_test_vector_element {$/;"	s	file:
upper_size	src/utils/test.c	/^	unsigned long upper_size;$/;"	m	struct:upper_lower_test_vector_element	file:
upper_size_to_lower_size	src/utils/test.c	/^upper_size_to_lower_size(struct ecryptfs_crypt_stat *crypt_stat,$/;"	f
usage	src/daemon/main.c	/^void usage(const char *const me, const struct option *const options,$/;"	f
usage	src/utils/ecryptfs-stat.c	/^static void usage(const char *filename)$/;"	f	file:
usage	src/utils/ecryptfs_add_passphrase.c	/^void usage(void)$/;"	f
usage	src/utils/ecryptfs_generate_tpm_key.c	/^void usage(char *name)$/;"	f
usage	src/utils/ecryptfs_insert_wrapped_passphrase_into_keyring.c	/^void usage(void)$/;"	f
usage	src/utils/ecryptfs_rewrap_passphrase.c	/^void usage(void)$/;"	f
usage	src/utils/ecryptfs_unwrap_passphrase.c	/^void usage(void)$/;"	f
usage	src/utils/ecryptfs_wrap_passphrase.c	/^void usage(void)$/;"	f
usage	src/utils/mount.ecryptfs.c	/^static void usage()$/;"	f	file:
usage	src/utils/umount.ecryptfs.c	/^static void usage()$/;"	f	file:
user_name	src/include/ecryptfs.h	/^	char *user_name;$/;"	m	struct:cipher_str_name_map_elem
user_name	src/include/ecryptfs.h	/^	char *user_name;$/;"	m	struct:ecryptfs_cipher_elem
util_bytes_to_string	src/utils/ecryptfs_generate_tpm_key.c	/^char *util_bytes_to_string(char *bytes, int chars)$/;"	f
uuid	src/key_mod/ecryptfs_key_mod_tspi.c	/^	TSS_UUID uuid;$/;"	m	struct:key_mapper	file:
uuid	src/key_mod/ecryptfs_key_mod_tspi.c	/^	TSS_UUID uuid;$/;"	m	struct:tspi_data	file:
val	src/include/decision_graph.h	/^        char *val;$/;"	m	struct:param_node
val	src/include/decision_graph.h	/^        char *val;$/;"	m	struct:transition_node
val	src/include/decision_graph.h	/^        void *val;$/;"	m	struct:val_node
val	src/include/ecryptfs.h	/^	char *val;$/;"	m	struct:key_mod_param_val
val	src/include/ecryptfs.h	/^	struct key_mod_param_val *val;$/;"	m	struct:key_mod_param	typeref:struct:key_mod_param::key_mod_param_val
val_node	src/include/decision_graph.h	/^struct val_node {$/;"	s
val_type	src/include/decision_graph.h	/^        int val_type;$/;"	m	struct:param_node
validate_keysig	src/key_mod/ecryptfs_key_mod_gpg.c	/^int validate_keysig(char *keysig)$/;"	f
value	src/include/ecryptfs.h	/^	char *value;$/;"	m	struct:ecryptfs_name_val_pair
vars	src/libecryptfs-swig/libecryptfs_wrap.c	/^    swig_globalvar *vars;$/;"	m	struct:swig_varlinkobject	file:
verbosity	src/include/ecryptfs.h	/^	int verbosity;$/;"	m	struct:ecryptfs_ctx
version	src/include/ecryptfs.h	/^	uint16_t version; \/* 8-bit major and 8-bit minor *\/$/;"	m	struct:ecryptfs_auth_tok
wait	src/key_mod/ecryptfs_key_mod_tspi.c	/^	pthread_mutex_t wait;$/;"	m	struct:ecryptfs_tspi_connect_ticket	file:
wbc	src/utils/test.c	/^		struct writeback_control *wbc;$/;"	m	union:ecryptfs_page_crypt_context::__anon6	typeref:struct:ecryptfs_page_crypt_context::__anon6::writeback_control	file:
wrap_passphrase_if_necessary	src/pam_ecryptfs/pam_ecryptfs.c	/^static int wrap_passphrase_if_necessary(char *username, uid_t uid, char *wrapped_pw_filename, char *passphrase, char *salt)$/;"	f	file:
write_failure_packet	src/libecryptfs/packets.c	/^static int write_failure_packet(size_t tag,$/;"	f	file:
write_tag_65_packet	src/libecryptfs/packets.c	/^static int write_tag_65_packet(unsigned char *key, size_t key_size,$/;"	f	file:
write_tag_67_packet	src/libecryptfs/packets.c	/^write_tag_67_packet(char *key, size_t key_size,$/;"	f	file:
writeback_control	src/utils/test.c	/^struct writeback_control {$/;"	s	file:
xattr_param_node	src/libecryptfs/module_mgr.c	/^static struct param_node xattr_param_node = {$/;"	v	typeref:struct:param_node	file:
xattr_param_node_orig	src/libecryptfs/module_mgr.c	/^static struct param_node xattr_param_node_orig = {$/;"	v	typeref:struct:param_node	file:
zero	src/utils/mount.ecryptfs_private.c	/^int zero(FILE *fh) {$/;"	f
